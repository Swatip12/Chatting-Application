{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class LoadingService {\n  constructor() {\n    this.loadingSubject = new BehaviorSubject(false);\n    this.loadingStates = new Map();\n  }\n  /**\r\n   * Get global loading state\r\n   */\n  getLoadingState() {\n    return this.loadingSubject.asObservable();\n  }\n  /**\r\n   * Set global loading state\r\n   */\n  setLoading(loading) {\n    this.loadingSubject.next(loading);\n  }\n  /**\r\n   * Set loading state for a specific operation\r\n   */\n  setLoadingFor(key, loading) {\n    this.loadingStates.set(key, loading);\n    this.updateGlobalLoadingState();\n  }\n  /**\r\n   * Get loading state for a specific operation\r\n   */\n  isLoadingFor(key) {\n    return this.loadingStates.get(key) || false;\n  }\n  /**\r\n   * Clear all loading states\r\n   */\n  clearAll() {\n    this.loadingStates.clear();\n    this.loadingSubject.next(false);\n  }\n  updateGlobalLoadingState() {\n    const hasAnyLoading = Array.from(this.loadingStates.values()).some(loading => loading);\n    this.loadingSubject.next(hasAnyLoading);\n  }\n  static {\n    this.ɵfac = function LoadingService_Factory(t) {\n      return new (t || LoadingService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoadingService,\n      factory: LoadingService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;AAKlD,OAAM,MAAOC,cAAc;EAIzBC;IAHQ,mBAAc,GAAG,IAAIF,eAAe,CAAU,KAAK,CAAC;IACpD,kBAAa,GAAG,IAAIG,GAAG,EAAmB;EAEnC;EAEf;;;EAGAC,eAAe;IACb,OAAO,IAAI,CAACC,cAAc,CAACC,YAAY,EAAE;EAC3C;EAEA;;;EAGAC,UAAU,CAACC,OAAgB;IACzB,IAAI,CAACH,cAAc,CAACI,IAAI,CAACD,OAAO,CAAC;EACnC;EAEA;;;EAGAE,aAAa,CAACC,GAAW,EAAEH,OAAgB;IACzC,IAAI,CAACI,aAAa,CAACC,GAAG,CAACF,GAAG,EAAEH,OAAO,CAAC;IACpC,IAAI,CAACM,wBAAwB,EAAE;EACjC;EAEA;;;EAGAC,YAAY,CAACJ,GAAW;IACtB,OAAO,IAAI,CAACC,aAAa,CAACI,GAAG,CAACL,GAAG,CAAC,IAAI,KAAK;EAC7C;EAEA;;;EAGAM,QAAQ;IACN,IAAI,CAACL,aAAa,CAACM,KAAK,EAAE;IAC1B,IAAI,CAACb,cAAc,CAACI,IAAI,CAAC,KAAK,CAAC;EACjC;EAEQK,wBAAwB;IAC9B,MAAMK,aAAa,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACT,aAAa,CAACU,MAAM,EAAE,CAAC,CAACC,IAAI,CAACf,OAAO,IAAIA,OAAO,CAAC;IACtF,IAAI,CAACH,cAAc,CAACI,IAAI,CAACU,aAAa,CAAC;EACzC;;;uBA9CWlB,cAAc;IAAA;EAAA;;;aAAdA,cAAc;MAAAuB,SAAdvB,cAAc;MAAAwB,YAFb;IAAM;EAAA","names":["BehaviorSubject","LoadingService","constructor","Map","getLoadingState","loadingSubject","asObservable","setLoading","loading","next","setLoadingFor","key","loadingStates","set","updateGlobalLoadingState","isLoadingFor","get","clearAll","clear","hasAnyLoading","Array","from","values","some","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\swatip\\Documents\\FSD Projects\\Chatting-Application\\frontend\\src\\app\\services\\loading.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoadingService {\r\n  private loadingSubject = new BehaviorSubject<boolean>(false);\r\n  private loadingStates = new Map<string, boolean>();\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Get global loading state\r\n   */\r\n  getLoadingState(): Observable<boolean> {\r\n    return this.loadingSubject.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Set global loading state\r\n   */\r\n  setLoading(loading: boolean): void {\r\n    this.loadingSubject.next(loading);\r\n  }\r\n\r\n  /**\r\n   * Set loading state for a specific operation\r\n   */\r\n  setLoadingFor(key: string, loading: boolean): void {\r\n    this.loadingStates.set(key, loading);\r\n    this.updateGlobalLoadingState();\r\n  }\r\n\r\n  /**\r\n   * Get loading state for a specific operation\r\n   */\r\n  isLoadingFor(key: string): boolean {\r\n    return this.loadingStates.get(key) || false;\r\n  }\r\n\r\n  /**\r\n   * Clear all loading states\r\n   */\r\n  clearAll(): void {\r\n    this.loadingStates.clear();\r\n    this.loadingSubject.next(false);\r\n  }\r\n\r\n  private updateGlobalLoadingState(): void {\r\n    const hasAnyLoading = Array.from(this.loadingStates.values()).some(loading => loading);\r\n    this.loadingSubject.next(hasAnyLoading);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}