{"ast":null,"code":"import { BehaviorSubject, fromEvent, merge } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class ConnectionStatusService {\n  constructor() {\n    this.connectionStatusSubject = new BehaviorSubject({\n      online: navigator.onLine,\n      chatConnected: false,\n      reconnectAttempts: 0\n    });\n    this.initializeNetworkStatusMonitoring();\n  }\n  getConnectionStatus() {\n    return this.connectionStatusSubject.asObservable();\n  }\n  updateChatConnectionStatus(connected, reconnectAttempts = 0) {\n    const currentStatus = this.connectionStatusSubject.value;\n    this.connectionStatusSubject.next({\n      ...currentStatus,\n      chatConnected: connected,\n      lastConnected: connected ? new Date() : currentStatus.lastConnected,\n      reconnectAttempts\n    });\n  }\n  isOnline() {\n    return this.connectionStatusSubject.value.online;\n  }\n  isChatConnected() {\n    return this.connectionStatusSubject.value.chatConnected;\n  }\n  initializeNetworkStatusMonitoring() {\n    // Monitor network connectivity\n    const online$ = fromEvent(window, 'online').pipe(map(() => true));\n    const offline$ = fromEvent(window, 'offline').pipe(map(() => false));\n    merge(online$, offline$).pipe(startWith(navigator.onLine)).subscribe(online => {\n      const currentStatus = this.connectionStatusSubject.value;\n      this.connectionStatusSubject.next({\n        ...currentStatus,\n        online\n      });\n    });\n  }\n  static {\n    this.ɵfac = function ConnectionStatusService_Factory(t) {\n      return new (t || ConnectionStatusService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ConnectionStatusService,\n      factory: ConnectionStatusService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,EAAcC,SAAS,EAAEC,KAAK,QAAQ,MAAM;AACpE,SAASC,GAAG,EAAEC,SAAS,QAAQ,gBAAgB;;AAY/C,OAAM,MAAOC,uBAAuB;EAOlCC;IANQ,4BAAuB,GAAG,IAAIN,eAAe,CAAmB;MACtEO,MAAM,EAAEC,SAAS,CAACC,MAAM;MACxBC,aAAa,EAAE,KAAK;MACpBC,iBAAiB,EAAE;KACpB,CAAC;IAGA,IAAI,CAACC,iCAAiC,EAAE;EAC1C;EAEAC,mBAAmB;IACjB,OAAO,IAAI,CAACC,uBAAuB,CAACC,YAAY,EAAE;EACpD;EAEAC,0BAA0B,CAACC,SAAkB,EAAEN,oBAA4B,CAAC;IAC1E,MAAMO,aAAa,GAAG,IAAI,CAACJ,uBAAuB,CAACK,KAAK;IACxD,IAAI,CAACL,uBAAuB,CAACM,IAAI,CAAC;MAChC,GAAGF,aAAa;MAChBR,aAAa,EAAEO,SAAS;MACxBI,aAAa,EAAEJ,SAAS,GAAG,IAAIK,IAAI,EAAE,GAAGJ,aAAa,CAACG,aAAa;MACnEV;KACD,CAAC;EACJ;EAEAY,QAAQ;IACN,OAAO,IAAI,CAACT,uBAAuB,CAACK,KAAK,CAACZ,MAAM;EAClD;EAEAiB,eAAe;IACb,OAAO,IAAI,CAACV,uBAAuB,CAACK,KAAK,CAACT,aAAa;EACzD;EAEQE,iCAAiC;IACvC;IACA,MAAMa,OAAO,GAAGxB,SAAS,CAACyB,MAAM,EAAE,QAAQ,CAAC,CAACC,IAAI,CAACxB,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC;IACjE,MAAMyB,QAAQ,GAAG3B,SAAS,CAACyB,MAAM,EAAE,SAAS,CAAC,CAACC,IAAI,CAACxB,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC;IAEpED,KAAK,CAACuB,OAAO,EAAEG,QAAQ,CAAC,CACrBD,IAAI,CAACvB,SAAS,CAACI,SAAS,CAACC,MAAM,CAAC,CAAC,CACjCoB,SAAS,CAACtB,MAAM,IAAG;MAClB,MAAMW,aAAa,GAAG,IAAI,CAACJ,uBAAuB,CAACK,KAAK;MACxD,IAAI,CAACL,uBAAuB,CAACM,IAAI,CAAC;QAChC,GAAGF,aAAa;QAChBX;OACD,CAAC;IACJ,CAAC,CAAC;EACN;;;uBA/CWF,uBAAuB;IAAA;EAAA;;;aAAvBA,uBAAuB;MAAAyB,SAAvBzB,uBAAuB;MAAA0B,YAFtB;IAAM;EAAA","names":["BehaviorSubject","fromEvent","merge","map","startWith","ConnectionStatusService","constructor","online","navigator","onLine","chatConnected","reconnectAttempts","initializeNetworkStatusMonitoring","getConnectionStatus","connectionStatusSubject","asObservable","updateChatConnectionStatus","connected","currentStatus","value","next","lastConnected","Date","isOnline","isChatConnected","online$","window","pipe","offline$","subscribe","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\swatip\\Documents\\FSD Projects\\Chatting-Application\\frontend\\src\\app\\services\\connection-status.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, fromEvent, merge } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\n\r\nexport interface ConnectionStatus {\r\n  online: boolean;\r\n  chatConnected: boolean;\r\n  lastConnected?: Date;\r\n  reconnectAttempts: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConnectionStatusService {\r\n  private connectionStatusSubject = new BehaviorSubject<ConnectionStatus>({\r\n    online: navigator.onLine,\r\n    chatConnected: false,\r\n    reconnectAttempts: 0\r\n  });\r\n\r\n  constructor() {\r\n    this.initializeNetworkStatusMonitoring();\r\n  }\r\n\r\n  getConnectionStatus(): Observable<ConnectionStatus> {\r\n    return this.connectionStatusSubject.asObservable();\r\n  }\r\n\r\n  updateChatConnectionStatus(connected: boolean, reconnectAttempts: number = 0): void {\r\n    const currentStatus = this.connectionStatusSubject.value;\r\n    this.connectionStatusSubject.next({\r\n      ...currentStatus,\r\n      chatConnected: connected,\r\n      lastConnected: connected ? new Date() : currentStatus.lastConnected,\r\n      reconnectAttempts\r\n    });\r\n  }\r\n\r\n  isOnline(): boolean {\r\n    return this.connectionStatusSubject.value.online;\r\n  }\r\n\r\n  isChatConnected(): boolean {\r\n    return this.connectionStatusSubject.value.chatConnected;\r\n  }\r\n\r\n  private initializeNetworkStatusMonitoring(): void {\r\n    // Monitor network connectivity\r\n    const online$ = fromEvent(window, 'online').pipe(map(() => true));\r\n    const offline$ = fromEvent(window, 'offline').pipe(map(() => false));\r\n    \r\n    merge(online$, offline$)\r\n      .pipe(startWith(navigator.onLine))\r\n      .subscribe(online => {\r\n        const currentStatus = this.connectionStatusSubject.value;\r\n        this.connectionStatusSubject.next({\r\n          ...currentStatus,\r\n          online\r\n        });\r\n      });\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}