{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GroupService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/groups`;\n    this.userGroupsSubject = new BehaviorSubject([]);\n    this.allGroupsSubject = new BehaviorSubject([]);\n  }\n  /**\r\n   * Create a new group\r\n   */\n  createGroup(groupRequest) {\n    return this.http.post(`${this.apiUrl}`, groupRequest).pipe(map(response => response.data), tap(() => this.refreshUserGroups()));\n  }\n  /**\r\n   * Get group information by ID\r\n   */\n  getGroup(groupId, includeMembers = false) {\n    const params = new HttpParams().set('includeMembers', includeMembers.toString());\n    return this.http.get(`${this.apiUrl}/${groupId}`, {\n      params\n    }).pipe(map(response => response.data));\n  }\n  /**\r\n   * Get all groups where the current user is a member\r\n   */\n  getUserGroups(limit = 20) {\n    const params = new HttpParams().set('limit', limit.toString());\n    return this.http.get(`${this.apiUrl}/my`, {\n      params\n    }).pipe(map(response => response.data), tap(groups => this.userGroupsSubject.next(groups)));\n  }\n  /**\r\n   * Get all available groups (for discovery)\r\n   */\n  getAllGroups(limit = 50) {\n    const params = new HttpParams().set('limit', limit.toString());\n    return this.http.get(`${this.apiUrl}`, {\n      params\n    }).pipe(map(response => response.data), tap(groups => this.allGroupsSubject.next(groups)));\n  }\n  /**\r\n   * Search groups by name\r\n   */\n  searchGroups(searchTerm, limit = 20) {\n    const params = new HttpParams().set('q', searchTerm).set('limit', limit.toString());\n    return this.http.get(`${this.apiUrl}/search`, {\n      params\n    }).pipe(map(response => response.data));\n  }\n  /**\r\n   * Add a member to a group\r\n   */\n  addMember(groupId, memberRequest) {\n    return this.http.post(`${this.apiUrl}/${groupId}/members`, memberRequest).pipe(map(response => response.data), tap(() => this.refreshUserGroups()));\n  }\n  /**\r\n   * Remove a member from a group\r\n   */\n  removeMember(groupId, memberRequest) {\n    return this.http.delete(`${this.apiUrl}/${groupId}/members`, {\n      body: memberRequest\n    }).pipe(map(response => response.data), tap(() => this.refreshUserGroups()));\n  }\n  /**\r\n   * Check if current user is a member of a group\r\n   */\n  checkMembership(groupId) {\n    return this.http.get(`${this.apiUrl}/${groupId}/membership`).pipe(map(response => response.data));\n  }\n  /**\r\n   * Get user groups as observable\r\n   */\n  getUserGroupsObservable() {\n    return this.userGroupsSubject.asObservable();\n  }\n  /**\r\n   * Get all groups as observable\r\n   */\n  getAllGroupsObservable() {\n    return this.allGroupsSubject.asObservable();\n  }\n  /**\r\n   * Refresh user groups\r\n   */\n  refreshUserGroups() {\n    this.getUserGroups().subscribe();\n  }\n  /**\r\n   * Refresh all groups\r\n   */\n  refreshAllGroups() {\n    this.getAllGroups().subscribe();\n  }\n  static {\n    this.ɵfac = function GroupService_Factory(t) {\n      return new (t || GroupService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GroupService,\n      factory: GroupService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["HttpParams","BehaviorSubject","map","tap","environment","GroupService","constructor","http","apiUrl","createGroup","groupRequest","post","pipe","response","data","refreshUserGroups","getGroup","groupId","includeMembers","params","set","toString","get","getUserGroups","limit","groups","userGroupsSubject","next","getAllGroups","allGroupsSubject","searchGroups","searchTerm","addMember","memberRequest","removeMember","delete","body","checkMembership","getUserGroupsObservable","asObservable","getAllGroupsObservable","subscribe","refreshAllGroups","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\swatip\\Documents\\FSD Projects\\Chatting-Application\\frontend\\src\\app\\services\\group.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport interface GroupRequest {\r\n  name: string;\r\n  description?: string;\r\n}\r\n\r\nexport interface GroupMemberRequest {\r\n  username: string;\r\n}\r\n\r\nimport { Group, GroupMember } from '../models/group.model';\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  message: string;\r\n  data: T;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupService {\r\n  private apiUrl = `${environment.apiUrl}/groups`;\r\n  private userGroupsSubject = new BehaviorSubject<GroupResponse[]>([]);\r\n  private allGroupsSubject = new BehaviorSubject<GroupResponse[]>([]);\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /**\r\n   * Create a new group\r\n   */\r\n  createGroup(groupRequest: GroupRequest): Observable<GroupResponse> {\r\n    return this.http.post<ApiResponse<GroupResponse>>(`${this.apiUrl}`, groupRequest)\r\n      .pipe(\r\n        map(response => response.data),\r\n        tap(() => this.refreshUserGroups())\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Get group information by ID\r\n   */\r\n  getGroup(groupId: string, includeMembers: boolean = false): Observable<GroupResponse> {\r\n    const params = new HttpParams().set('includeMembers', includeMembers.toString());\r\n    return this.http.get<ApiResponse<GroupResponse>>(`${this.apiUrl}/${groupId}`, { params })\r\n      .pipe(map(response => response.data));\r\n  }\r\n\r\n  /**\r\n   * Get all groups where the current user is a member\r\n   */\r\n  getUserGroups(limit: number = 20): Observable<GroupResponse[]> {\r\n    const params = new HttpParams().set('limit', limit.toString());\r\n    return this.http.get<ApiResponse<GroupResponse[]>>(`${this.apiUrl}/my`, { params })\r\n      .pipe(\r\n        map(response => response.data),\r\n        tap(groups => this.userGroupsSubject.next(groups))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Get all available groups (for discovery)\r\n   */\r\n  getAllGroups(limit: number = 50): Observable<GroupResponse[]> {\r\n    const params = new HttpParams().set('limit', limit.toString());\r\n    return this.http.get<ApiResponse<GroupResponse[]>>(`${this.apiUrl}`, { params })\r\n      .pipe(\r\n        map(response => response.data),\r\n        tap(groups => this.allGroupsSubject.next(groups))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Search groups by name\r\n   */\r\n  searchGroups(searchTerm: string, limit: number = 20): Observable<GroupResponse[]> {\r\n    const params = new HttpParams()\r\n      .set('q', searchTerm)\r\n      .set('limit', limit.toString());\r\n    return this.http.get<ApiResponse<GroupResponse[]>>(`${this.apiUrl}/search`, { params })\r\n      .pipe(map(response => response.data));\r\n  }\r\n\r\n  /**\r\n   * Add a member to a group\r\n   */\r\n  addMember(groupId: string, memberRequest: GroupMemberRequest): Observable<GroupResponse> {\r\n    return this.http.post<ApiResponse<GroupResponse>>(`${this.apiUrl}/${groupId}/members`, memberRequest)\r\n      .pipe(\r\n        map(response => response.data),\r\n        tap(() => this.refreshUserGroups())\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Remove a member from a group\r\n   */\r\n  removeMember(groupId: string, memberRequest: GroupMemberRequest): Observable<GroupResponse> {\r\n    return this.http.delete<ApiResponse<GroupResponse>>(`${this.apiUrl}/${groupId}/members`, { body: memberRequest })\r\n      .pipe(\r\n        map(response => response.data),\r\n        tap(() => this.refreshUserGroups())\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Check if current user is a member of a group\r\n   */\r\n  checkMembership(groupId: string): Observable<boolean> {\r\n    return this.http.get<ApiResponse<boolean>>(`${this.apiUrl}/${groupId}/membership`)\r\n      .pipe(map(response => response.data));\r\n  }\r\n\r\n  /**\r\n   * Get user groups as observable\r\n   */\r\n  getUserGroupsObservable(): Observable<GroupResponse[]> {\r\n    return this.userGroupsSubject.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Get all groups as observable\r\n   */\r\n  getAllGroupsObservable(): Observable<GroupResponse[]> {\r\n    return this.allGroupsSubject.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Refresh user groups\r\n   */\r\n  refreshUserGroups(): void {\r\n    this.getUserGroups().subscribe();\r\n  }\r\n\r\n  /**\r\n   * Refresh all groups\r\n   */\r\n  refreshAllGroups(): void {\r\n    this.getAllGroups().subscribe();\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}