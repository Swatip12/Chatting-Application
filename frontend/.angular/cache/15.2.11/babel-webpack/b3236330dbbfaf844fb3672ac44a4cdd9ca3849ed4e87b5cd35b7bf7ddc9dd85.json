{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/notification.service\";\nimport * as i2 from \"../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nexport class ErrorInterceptor {\n  constructor(notificationService, authService, router) {\n    this.notificationService = notificationService;\n    this.authService = authService;\n    this.router = router;\n  }\n  intercept(req, next) {\n    return next.handle(req).pipe(retry(1),\n    // Retry failed requests once\n    catchError(error => {\n      let errorMessage = 'An unexpected error occurred';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = `Client Error: ${error.error.message}`;\n      } else {\n        // Server-side error\n        switch (error.status) {\n          case 400:\n            errorMessage = this.handleBadRequest(error);\n            break;\n          case 401:\n            errorMessage = 'Invalid credentials or session expired';\n            this.handleUnauthorized();\n            break;\n          case 403:\n            errorMessage = 'You do not have permission to perform this action';\n            break;\n          case 404:\n            errorMessage = 'The requested resource was not found';\n            break;\n          case 409:\n            errorMessage = this.handleConflict(error);\n            break;\n          case 422:\n            errorMessage = 'Invalid data provided';\n            break;\n          case 500:\n            errorMessage = 'Server error. Please try again later';\n            break;\n          case 503:\n            errorMessage = 'Service temporarily unavailable. Please try again later';\n            break;\n          case 0:\n            errorMessage = 'Unable to connect to server. Please check your internet connection';\n            break;\n          default:\n            errorMessage = `Server Error: ${error.status} - ${error.statusText}`;\n        }\n      }\n      // Extract error message from API response if available\n      if (error.error && error.error.message) {\n        errorMessage = error.error.message;\n      }\n      // Show user-friendly notification\n      this.notificationService.showError(errorMessage);\n      // Log error for debugging\n      console.error('HTTP Error:', {\n        status: error.status,\n        statusText: error.statusText,\n        url: error.url,\n        message: errorMessage,\n        error: error.error\n      });\n      return throwError(() => error);\n    }));\n  }\n  handleBadRequest(error) {\n    if (error.error && error.error.data && typeof error.error.data === 'object') {\n      // Handle validation errors\n      const validationErrors = error.error.data;\n      const errorMessages = Object.values(validationErrors).join(', ');\n      return `Validation Error: ${errorMessages}`;\n    }\n    return error.error?.message || 'Invalid request data';\n  }\n  handleConflict(error) {\n    return error.error?.message || 'Resource conflict occurred';\n  }\n  handleUnauthorized() {\n    // Clear user data and redirect to login\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n  static {\n    this.ɵfac = function ErrorInterceptor_Factory(t) {\n      return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.NotificationService), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorInterceptor,\n      factory: ErrorInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["throwError","catchError","retry","ErrorInterceptor","constructor","notificationService","authService","router","intercept","req","next","handle","pipe","error","errorMessage","ErrorEvent","message","status","handleBadRequest","handleUnauthorized","handleConflict","statusText","showError","console","url","data","validationErrors","errorMessages","Object","values","join","logout","navigate","factory"],"sourceRoot":"","sources":["C:\\Users\\swatip\\Documents\\FSD Projects\\Chatting-Application\\frontend\\src\\app\\interceptors\\error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { NotificationService } from '../services/notification.service';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n\r\n  constructor(\r\n    private notificationService: NotificationService,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return next.handle(req).pipe(\r\n      retry(1), // Retry failed requests once\r\n      catchError((error: HttpErrorResponse) => {\r\n        let errorMessage = 'An unexpected error occurred';\r\n        \r\n        if (error.error instanceof ErrorEvent) {\r\n          // Client-side error\r\n          errorMessage = `Client Error: ${error.error.message}`;\r\n        } else {\r\n          // Server-side error\r\n          switch (error.status) {\r\n            case 400:\r\n              errorMessage = this.handleBadRequest(error);\r\n              break;\r\n            case 401:\r\n              errorMessage = 'Invalid credentials or session expired';\r\n              this.handleUnauthorized();\r\n              break;\r\n            case 403:\r\n              errorMessage = 'You do not have permission to perform this action';\r\n              break;\r\n            case 404:\r\n              errorMessage = 'The requested resource was not found';\r\n              break;\r\n            case 409:\r\n              errorMessage = this.handleConflict(error);\r\n              break;\r\n            case 422:\r\n              errorMessage = 'Invalid data provided';\r\n              break;\r\n            case 500:\r\n              errorMessage = 'Server error. Please try again later';\r\n              break;\r\n            case 503:\r\n              errorMessage = 'Service temporarily unavailable. Please try again later';\r\n              break;\r\n            case 0:\r\n              errorMessage = 'Unable to connect to server. Please check your internet connection';\r\n              break;\r\n            default:\r\n              errorMessage = `Server Error: ${error.status} - ${error.statusText}`;\r\n          }\r\n        }\r\n\r\n        // Extract error message from API response if available\r\n        if (error.error && error.error.message) {\r\n          errorMessage = error.error.message;\r\n        }\r\n\r\n        // Show user-friendly notification\r\n        this.notificationService.showError(errorMessage);\r\n\r\n        // Log error for debugging\r\n        console.error('HTTP Error:', {\r\n          status: error.status,\r\n          statusText: error.statusText,\r\n          url: error.url,\r\n          message: errorMessage,\r\n          error: error.error\r\n        });\r\n\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  private handleBadRequest(error: HttpErrorResponse): string {\r\n    if (error.error && error.error.data && typeof error.error.data === 'object') {\r\n      // Handle validation errors\r\n      const validationErrors = error.error.data;\r\n      const errorMessages = Object.values(validationErrors).join(', ');\r\n      return `Validation Error: ${errorMessages}`;\r\n    }\r\n    return error.error?.message || 'Invalid request data';\r\n  }\r\n\r\n  private handleConflict(error: HttpErrorResponse): string {\r\n    return error.error?.message || 'Resource conflict occurred';\r\n  }\r\n\r\n  private handleUnauthorized(): void {\r\n    // Clear user data and redirect to login\r\n    this.authService.logout();\r\n    this.router.navigate(['/login']);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}