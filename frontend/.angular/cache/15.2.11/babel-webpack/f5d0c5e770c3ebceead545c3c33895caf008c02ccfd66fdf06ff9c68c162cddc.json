{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { MessageType } from '../../models/message.model';\nlet ChatRoomComponent = class ChatRoomComponent {\n  constructor(authService, chatService, groupService, router) {\n    this.authService = authService;\n    this.chatService = chatService;\n    this.groupService = groupService;\n    this.router = router;\n    this.currentUser = null;\n    this.users = [];\n    this.groups = [];\n    this.messages = [];\n    this.newMessage = '';\n    this.selectedUser = null;\n    this.selectedGroup = null;\n    this.loading = false;\n    this.connectionStatus = false;\n    this.isTyping = false;\n    // UI state\n    this.activeTab = 'users';\n    this.showGroupCreate = false;\n    this.subscriptions = [];\n    this.shouldScrollToBottom = false;\n  }\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentUser();\n    if (!this.currentUser) {\n      this.router.navigate(['/login']);\n      return;\n    }\n    this.initializeChat();\n  }\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.chatService.disconnect();\n  }\n  ngAfterViewChecked() {\n    if (this.shouldScrollToBottom) {\n      this.scrollToBottom();\n      this.shouldScrollToBottom = false;\n    }\n  }\n  initializeChat() {\n    // Connect to WebSocket\n    this.chatService.connect();\n    // Subscribe to messages\n    const messagesSub = this.chatService.subscribeToMessages().subscribe({\n      next: message => {\n        // Only add messages for current conversation or system messages\n        if (this.isMessageForCurrentConversation(message)) {\n          this.messages.push(message);\n          this.shouldScrollToBottom = true;\n        }\n      },\n      error: error => {\n        console.error('Error receiving message:', error);\n      }\n    });\n    // Subscribe to user status updates\n    const userStatusSub = this.chatService.subscribeToUserStatus().subscribe({\n      next: users => {\n        this.users = users.filter(user => user.id !== this.currentUser?.id);\n      },\n      error: error => {\n        console.error('Error receiving user status:', error);\n      }\n    });\n    // Subscribe to connection status\n    const connectionSub = this.chatService.getConnectionStatus().subscribe({\n      next: status => {\n        this.connectionStatus = status;\n      }\n    });\n    this.subscriptions.push(messagesSub, userStatusSub, connectionSub);\n    // Load initial data\n    this.loadUsers();\n    this.loadGroups();\n  }\n  loadUsers() {\n    this.authService.getUsers().subscribe({\n      next: users => {\n        this.users = users.filter(user => user.id !== this.currentUser?.id);\n      },\n      error: error => {\n        console.error('Error loading users:', error);\n      }\n    });\n  }\n  loadGroups() {\n    this.groupService.getUserGroups().subscribe({\n      next: groups => {\n        this.groups = groups;\n      },\n      error: error => {\n        console.error('Error loading groups:', error);\n      }\n    });\n  }\n  onUserSelected(user) {\n    this.selectedUser = user;\n    this.selectedGroup = null; // Clear group selection\n    this.loadMessageHistory(user.id);\n  }\n  onGroupSelected(group) {\n    this.selectedGroup = group;\n    this.selectedUser = null; // Clear user selection\n    this.loadGroupMessageHistory(group.id);\n    // Subscribe to group messages\n    this.chatService.subscribeToGroup(group.id);\n  }\n  loadMessageHistory(userId) {\n    this.loading = true;\n    this.messages = []; // Clear current messages\n    this.authService.getMessageHistory(userId).subscribe({\n      next: messages => {\n        this.messages = messages;\n        this.loading = false;\n        this.shouldScrollToBottom = true;\n      },\n      error: error => {\n        console.error('Error loading message history:', error);\n        this.loading = false;\n      }\n    });\n  }\n  loadGroupMessageHistory(groupId) {\n    this.loading = true;\n    this.messages = []; // Clear current messages\n    this.authService.getGroupMessageHistory(groupId).subscribe({\n      next: messages => {\n        this.messages = messages;\n        this.loading = false;\n        this.shouldScrollToBottom = true;\n      },\n      error: error => {\n        console.error('Error loading group message history:', error);\n        this.loading = false;\n      }\n    });\n  }\n  sendMessage() {\n    if (this.newMessage.trim() && this.currentUser) {\n      const message = {\n        sender: this.currentUser,\n        content: this.newMessage.trim(),\n        type: MessageType.CHAT,\n        timestamp: new Date()\n      };\n      if (this.selectedGroup) {\n        // Send group message\n        message.groupId = this.selectedGroup.id;\n        this.chatService.sendGroupMessage(message, this.selectedGroup.id);\n      } else if (this.selectedUser) {\n        // Send private message\n        message.receiver = this.selectedUser;\n        this.chatService.sendMessage(message);\n      }\n      this.newMessage = '';\n      this.shouldScrollToBottom = true;\n    }\n  }\n  onKeyPress(event) {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      this.sendMessage();\n    }\n  }\n  scrollToBottom() {\n    try {\n      if (this.messageArea) {\n        this.messageArea.nativeElement.scrollTop = this.messageArea.nativeElement.scrollHeight;\n      }\n    } catch (err) {\n      console.error('Error scrolling to bottom:', err);\n    }\n  }\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n  isOnline(user) {\n    return user.status === 'ONLINE';\n  }\n  getStatusClass(user) {\n    return this.isOnline(user) ? 'user-status-online' : 'user-status-offline';\n  }\n  isMessageForCurrentConversation(message) {\n    // System messages (JOIN/LEAVE) should be shown based on context\n    if (message.type === MessageType.JOIN || message.type === MessageType.LEAVE) {\n      // Show system messages for the current group or general chat\n      if (this.selectedGroup && message.groupId === this.selectedGroup.id) {\n        return true;\n      }\n      // Show general system messages when in private chat\n      if (this.selectedUser && !message.groupId) {\n        return true;\n      }\n      return false;\n    }\n    // Group messages\n    if (message.groupId) {\n      return this.selectedGroup?.id === message.groupId;\n    }\n    // Private messages\n    if (!this.selectedUser || !this.currentUser) {\n      return false;\n    }\n    // Show messages between current user and selected user\n    return message.sender.id === this.currentUser.id && message.receiver?.id === this.selectedUser.id || message.sender.id === this.selectedUser.id && message.receiver?.id === this.currentUser.id;\n  }\n  onMessageInput() {\n    // Handle typing indicators here if needed\n    this.isTyping = this.newMessage.trim().length > 0;\n  }\n  getConnectionStatusText() {\n    return this.connectionStatus ? 'Connected' : 'Disconnected';\n  }\n  getConnectionStatusClass() {\n    return this.connectionStatus ? 'text-success' : 'text-danger';\n  }\n  trackByMessageId(index, message) {\n    return message.id || `${message.sender.id}-${message.timestamp.getTime()}`;\n  }\n  // Group functionality methods\n  switchToUsersTab() {\n    this.activeTab = 'users';\n    this.selectedGroup = null;\n  }\n  switchToGroupsTab() {\n    this.activeTab = 'groups';\n    this.selectedUser = null;\n  }\n  onCreateGroupClick() {\n    this.showGroupCreate = true;\n  }\n  onGroupCreated(group) {\n    this.showGroupCreate = false;\n    this.groups.push(group);\n    this.onGroupSelected(group);\n  }\n  onGroupCreateCancelled() {\n    this.showGroupCreate = false;\n  }\n  getCurrentConversationName() {\n    if (this.selectedGroup) {\n      return this.selectedGroup.name;\n    }\n    if (this.selectedUser) {\n      return this.selectedUser.username;\n    }\n    return 'Select a conversation';\n  }\n  isGroupConversation() {\n    return !!this.selectedGroup;\n  }\n  canSendMessage() {\n    return !!(this.selectedUser || this.selectedGroup);\n  }\n};\n__decorate([ViewChild('messageArea')], ChatRoomComponent.prototype, \"messageArea\", void 0);\nChatRoomComponent = __decorate([Component({\n  selector: 'app-chat-room',\n  templateUrl: './chat-room.component.html',\n  styleUrls: ['./chat-room.component.css']\n})], ChatRoomComponent);\nexport { ChatRoomComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","MessageType","ChatRoomComponent","constructor","authService","chatService","groupService","router","ngOnInit","currentUser","getCurrentUser","navigate","initializeChat","ngOnDestroy","subscriptions","forEach","sub","unsubscribe","disconnect","ngAfterViewChecked","shouldScrollToBottom","scrollToBottom","connect","messagesSub","subscribeToMessages","subscribe","next","message","isMessageForCurrentConversation","messages","push","error","console","userStatusSub","subscribeToUserStatus","users","filter","user","id","connectionSub","getConnectionStatus","status","connectionStatus","loadUsers","loadGroups","getUsers","getUserGroups","groups","onUserSelected","selectedUser","selectedGroup","loadMessageHistory","onGroupSelected","group","loadGroupMessageHistory","subscribeToGroup","userId","loading","getMessageHistory","groupId","getGroupMessageHistory","sendMessage","newMessage","trim","sender","content","type","CHAT","timestamp","Date","sendGroupMessage","receiver","onKeyPress","event","key","shiftKey","preventDefault","messageArea","nativeElement","scrollTop","scrollHeight","err","logout","isOnline","getStatusClass","JOIN","LEAVE","onMessageInput","isTyping","length","getConnectionStatusText","getConnectionStatusClass","trackByMessageId","index","getTime","switchToUsersTab","activeTab","switchToGroupsTab","onCreateGroupClick","showGroupCreate","onGroupCreated","onGroupCreateCancelled","getCurrentConversationName","name","username","isGroupConversation","canSendMessage","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\swatip\\Documents\\FSD Projects\\Chatting-Application\\frontend\\src\\app\\components\\chat-room\\chat-room.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy, ViewChild, ElementRef, AfterViewChecked } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { ChatService } from '../../services/chat.service';\r\nimport { GroupService } from '../../services/group.service';\r\nimport { User } from '../../models/user.model';\r\nimport { Message, MessageType } from '../../models/message.model';\r\nimport { Group } from '../../models/group.model';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-chat-room',\r\n  templateUrl: './chat-room.component.html',\r\n  styleUrls: ['./chat-room.component.css']\r\n})\r\nexport class ChatRoomComponent implements OnInit, OnDestroy, AfterViewChecked {\r\n  @ViewChild('messageArea') private messageArea!: ElementRef;\r\n  currentUser: User | null = null;\r\n  users: User[] = [];\r\n  groups: Group[] = [];\r\n  messages: Message[] = [];\r\n  newMessage = '';\r\n  selectedUser: User | null = null;\r\n  selectedGroup: Group | null = null;\r\n  loading = false;\r\n  connectionStatus = false;\r\n  isTyping = false;\r\n  \r\n  // UI state\r\n  activeTab: 'users' | 'groups' = 'users';\r\n  showGroupCreate = false;\r\n  \r\n  private subscriptions: Subscription[] = [];\r\n  private shouldScrollToBottom = false;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private chatService: ChatService,\r\n    private groupService: GroupService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.currentUser = this.authService.getCurrentUser();\r\n    if (!this.currentUser) {\r\n      this.router.navigate(['/login']);\r\n      return;\r\n    }\r\n\r\n    this.initializeChat();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach(sub => sub.unsubscribe());\r\n    this.chatService.disconnect();\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this.shouldScrollToBottom) {\r\n      this.scrollToBottom();\r\n      this.shouldScrollToBottom = false;\r\n    }\r\n  }\r\n\r\n  private initializeChat(): void {\r\n    // Connect to WebSocket\r\n    this.chatService.connect();\r\n\r\n    // Subscribe to messages\r\n    const messagesSub = this.chatService.subscribeToMessages().subscribe({\r\n      next: (message: Message) => {\r\n        // Only add messages for current conversation or system messages\r\n        if (this.isMessageForCurrentConversation(message)) {\r\n          this.messages.push(message);\r\n          this.shouldScrollToBottom = true;\r\n        }\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error receiving message:', error);\r\n      }\r\n    });\r\n\r\n    // Subscribe to user status updates\r\n    const userStatusSub = this.chatService.subscribeToUserStatus().subscribe({\r\n      next: (users: User[]) => {\r\n        this.users = users.filter(user => user.id !== this.currentUser?.id);\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error receiving user status:', error);\r\n      }\r\n    });\r\n\r\n    // Subscribe to connection status\r\n    const connectionSub = this.chatService.getConnectionStatus().subscribe({\r\n      next: (status: boolean) => {\r\n        this.connectionStatus = status;\r\n      }\r\n    });\r\n\r\n    this.subscriptions.push(messagesSub, userStatusSub, connectionSub);\r\n\r\n    // Load initial data\r\n    this.loadUsers();\r\n    this.loadGroups();\r\n  }\r\n\r\n  private loadUsers(): void {\r\n    this.authService.getUsers().subscribe({\r\n      next: (users: User[]) => {\r\n        this.users = users.filter(user => user.id !== this.currentUser?.id);\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading users:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  private loadGroups(): void {\r\n    this.groupService.getUserGroups().subscribe({\r\n      next: (groups: Group[]) => {\r\n        this.groups = groups;\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading groups:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  onUserSelected(user: User): void {\r\n    this.selectedUser = user;\r\n    this.selectedGroup = null; // Clear group selection\r\n    this.loadMessageHistory(user.id);\r\n  }\r\n\r\n  onGroupSelected(group: Group): void {\r\n    this.selectedGroup = group;\r\n    this.selectedUser = null; // Clear user selection\r\n    this.loadGroupMessageHistory(group.id);\r\n    // Subscribe to group messages\r\n    this.chatService.subscribeToGroup(group.id);\r\n  }\r\n\r\n  private loadMessageHistory(userId: number): void {\r\n    this.loading = true;\r\n    this.messages = []; // Clear current messages\r\n    \r\n    this.authService.getMessageHistory(userId).subscribe({\r\n      next: (messages: Message[]) => {\r\n        this.messages = messages;\r\n        this.loading = false;\r\n        this.shouldScrollToBottom = true;\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading message history:', error);\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  private loadGroupMessageHistory(groupId: string): void {\r\n    this.loading = true;\r\n    this.messages = []; // Clear current messages\r\n    \r\n    this.authService.getGroupMessageHistory(groupId).subscribe({\r\n      next: (messages: Message[]) => {\r\n        this.messages = messages;\r\n        this.loading = false;\r\n        this.shouldScrollToBottom = true;\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading group message history:', error);\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  sendMessage(): void {\r\n    if (this.newMessage.trim() && this.currentUser) {\r\n      const message: Message = {\r\n        sender: this.currentUser,\r\n        content: this.newMessage.trim(),\r\n        type: MessageType.CHAT,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      if (this.selectedGroup) {\r\n        // Send group message\r\n        message.groupId = this.selectedGroup.id;\r\n        this.chatService.sendGroupMessage(message, this.selectedGroup.id);\r\n      } else if (this.selectedUser) {\r\n        // Send private message\r\n        message.receiver = this.selectedUser;\r\n        this.chatService.sendMessage(message);\r\n      }\r\n\r\n      this.newMessage = '';\r\n      this.shouldScrollToBottom = true;\r\n    }\r\n  }\r\n\r\n  onKeyPress(event: KeyboardEvent): void {\r\n    if (event.key === 'Enter' && !event.shiftKey) {\r\n      event.preventDefault();\r\n      this.sendMessage();\r\n    }\r\n  }\r\n\r\n  private scrollToBottom(): void {\r\n    try {\r\n      if (this.messageArea) {\r\n        this.messageArea.nativeElement.scrollTop = this.messageArea.nativeElement.scrollHeight;\r\n      }\r\n    } catch (err) {\r\n      console.error('Error scrolling to bottom:', err);\r\n    }\r\n  }\r\n\r\n  logout(): void {\r\n    this.authService.logout();\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  isOnline(user: User): boolean {\r\n    return user.status === 'ONLINE';\r\n  }\r\n\r\n  getStatusClass(user: User): string {\r\n    return this.isOnline(user) ? 'user-status-online' : 'user-status-offline';\r\n  }\r\n\r\n  private isMessageForCurrentConversation(message: Message): boolean {\r\n    // System messages (JOIN/LEAVE) should be shown based on context\r\n    if (message.type === MessageType.JOIN || message.type === MessageType.LEAVE) {\r\n      // Show system messages for the current group or general chat\r\n      if (this.selectedGroup && message.groupId === this.selectedGroup.id) {\r\n        return true;\r\n      }\r\n      // Show general system messages when in private chat\r\n      if (this.selectedUser && !message.groupId) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // Group messages\r\n    if (message.groupId) {\r\n      return this.selectedGroup?.id === message.groupId;\r\n    }\r\n\r\n    // Private messages\r\n    if (!this.selectedUser || !this.currentUser) {\r\n      return false;\r\n    }\r\n\r\n    // Show messages between current user and selected user\r\n    return (\r\n      (message.sender.id === this.currentUser.id && message.receiver?.id === this.selectedUser.id) ||\r\n      (message.sender.id === this.selectedUser.id && message.receiver?.id === this.currentUser.id)\r\n    );\r\n  }\r\n\r\n  onMessageInput(): void {\r\n    // Handle typing indicators here if needed\r\n    this.isTyping = this.newMessage.trim().length > 0;\r\n  }\r\n\r\n  getConnectionStatusText(): string {\r\n    return this.connectionStatus ? 'Connected' : 'Disconnected';\r\n  }\r\n\r\n  getConnectionStatusClass(): string {\r\n    return this.connectionStatus ? 'text-success' : 'text-danger';\r\n  }\r\n\r\n  trackByMessageId(index: number, message: Message): number | string {\r\n    return message.id || `${message.sender.id}-${message.timestamp.getTime()}`;\r\n  }\r\n\r\n  // Group functionality methods\r\n  switchToUsersTab(): void {\r\n    this.activeTab = 'users';\r\n    this.selectedGroup = null;\r\n  }\r\n\r\n  switchToGroupsTab(): void {\r\n    this.activeTab = 'groups';\r\n    this.selectedUser = null;\r\n  }\r\n\r\n  onCreateGroupClick(): void {\r\n    this.showGroupCreate = true;\r\n  }\r\n\r\n  onGroupCreated(group: Group): void {\r\n    this.showGroupCreate = false;\r\n    this.groups.push(group);\r\n    this.onGroupSelected(group);\r\n  }\r\n\r\n  onGroupCreateCancelled(): void {\r\n    this.showGroupCreate = false;\r\n  }\r\n\r\n  getCurrentConversationName(): string {\r\n    if (this.selectedGroup) {\r\n      return this.selectedGroup.name;\r\n    }\r\n    if (this.selectedUser) {\r\n      return this.selectedUser.username;\r\n    }\r\n    return 'Select a conversation';\r\n  }\r\n\r\n  isGroupConversation(): boolean {\r\n    return !!this.selectedGroup;\r\n  }\r\n\r\n  canSendMessage(): boolean {\r\n    return !!(this.selectedUser || this.selectedGroup);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}