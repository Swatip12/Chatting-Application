{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./loading.service\";\nimport * as i3 from \"./notification.service\";\nexport class AuthService {\n  constructor(http, loadingService, notificationService) {\n    this.http = http;\n    this.loadingService = loadingService;\n    this.notificationService = notificationService;\n    this.apiUrl = 'http://localhost:8080/api';\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    // Load user from localStorage on service initialization\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      this.currentUserSubject.next(JSON.parse(storedUser));\n    }\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData);\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n      if (response.user) {\n        // Store user in localStorage\n        localStorage.setItem('currentUser', JSON.stringify(response.user));\n        this.currentUserSubject.next(response.user);\n      }\n    }));\n  }\n  logout() {\n    // Call logout endpoint\n    this.http.post(`${this.apiUrl}/logout`, {}).subscribe({\n      next: () => {\n        this.clearUserData();\n      },\n      error: () => {\n        // Clear data even if logout request fails\n        this.clearUserData();\n      }\n    });\n  }\n  clearUserData() {\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  isAuthenticated() {\n    return this.getCurrentUser() !== null;\n  }\n  getUsers() {\n    return this.http.get(`${this.apiUrl}/users`);\n  }\n  getOnlineUsers() {\n    return this.http.get(`${this.apiUrl}/users/online`);\n  }\n  updateUserStatus(status) {\n    return this.http.put(`${this.apiUrl}/users/status`, {\n      status\n    });\n  }\n  getMessageHistory(userId) {\n    return this.http.get(`${this.apiUrl}/messages/${userId}`);\n  }\n  getGroupMessageHistory(groupId) {\n    return this.http.get(`${this.apiUrl}/messages/group/${groupId}`);\n  }\n  // HTTP interceptor helper methods\n  getAuthHeaders() {\n    const user = this.getCurrentUser();\n    if (user) {\n      return new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${user.id}` // Simple user ID based auth for demo\n      });\n    }\n\n    return new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LoadingService), i0.ɵɵinject(i3.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","BehaviorSubject","tap","AuthService","constructor","http","loadingService","notificationService","currentUserSubject","asObservable","storedUser","localStorage","getItem","next","JSON","parse","register","userData","post","apiUrl","login","credentials","pipe","response","user","setItem","stringify","logout","subscribe","clearUserData","error","removeItem","getCurrentUser","value","isAuthenticated","getUsers","get","getOnlineUsers","updateUserStatus","status","put","getMessageHistory","userId","getGroupMessageHistory","groupId","getAuthHeaders","id","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\swatip\\Documents\\FSD Projects\\Chatting-Application\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap, finalize } from 'rxjs/operators';\r\nimport { User, LoginRequest, RegisterRequest, AuthResponse } from '../models/user.model';\r\nimport { Message } from '../models/message.model';\r\nimport { LoadingService } from './loading.service';\r\nimport { NotificationService } from './notification.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n    private apiUrl = 'http://localhost:8080/api';\r\n    private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n    public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private loadingService: LoadingService,\r\n        private notificationService: NotificationService\r\n    ) {\r\n        // Load user from localStorage on service initialization\r\n        const storedUser = localStorage.getItem('currentUser');\r\n        if (storedUser) {\r\n            this.currentUserSubject.next(JSON.parse(storedUser));\r\n        }\r\n    }\r\n\r\n    register(userData: RegisterRequest): Observable<AuthResponse> {\r\n        return this.http.post<AuthResponse>(`${this.apiUrl}/register`, userData);\r\n    }\r\n\r\n    login(credentials: LoginRequest): Observable<AuthResponse> {\r\n        return this.http.post<AuthResponse>(`${this.apiUrl}/login`, credentials)\r\n            .pipe(\r\n                tap((response: AuthResponse) => {\r\n                    if (response.user) {\r\n                        // Store user in localStorage\r\n                        localStorage.setItem('currentUser', JSON.stringify(response.user));\r\n                        this.currentUserSubject.next(response.user);\r\n                    }\r\n                })\r\n            );\r\n    }\r\n\r\n    logout(): void {\r\n        // Call logout endpoint\r\n        this.http.post(`${this.apiUrl}/logout`, {}).subscribe({\r\n            next: () => {\r\n                this.clearUserData();\r\n            },\r\n            error: () => {\r\n                // Clear data even if logout request fails\r\n                this.clearUserData();\r\n            }\r\n        });\r\n    }\r\n\r\n    private clearUserData(): void {\r\n        localStorage.removeItem('currentUser');\r\n        this.currentUserSubject.next(null);\r\n    }\r\n\r\n    getCurrentUser(): User | null {\r\n        return this.currentUserSubject.value;\r\n    }\r\n\r\n    isAuthenticated(): boolean {\r\n        return this.getCurrentUser() !== null;\r\n    }\r\n\r\n    getUsers(): Observable<User[]> {\r\n        return this.http.get<User[]>(`${this.apiUrl}/users`);\r\n    }\r\n\r\n    getOnlineUsers(): Observable<User[]> {\r\n        return this.http.get<User[]>(`${this.apiUrl}/users/online`);\r\n    }\r\n\r\n    updateUserStatus(status: string): Observable<any> {\r\n        return this.http.put(`${this.apiUrl}/users/status`, { status });\r\n    }\r\n\r\n    getMessageHistory(userId: number): Observable<Message[]> {\r\n        return this.http.get<Message[]>(`${this.apiUrl}/messages/${userId}`);\r\n    }\r\n\r\n    getGroupMessageHistory(groupId: string): Observable<Message[]> {\r\n        return this.http.get<Message[]>(`${this.apiUrl}/messages/group/${groupId}`);\r\n    }\r\n\r\n    // HTTP interceptor helper methods\r\n    getAuthHeaders(): HttpHeaders {\r\n        const user = this.getCurrentUser();\r\n        if (user) {\r\n            return new HttpHeaders({\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${user.id}` // Simple user ID based auth for demo\r\n            });\r\n        }\r\n        return new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n        });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}