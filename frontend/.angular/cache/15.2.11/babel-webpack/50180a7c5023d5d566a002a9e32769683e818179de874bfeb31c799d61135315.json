{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/swatip/Documents/FSD Projects/Chatting-Application/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { StompHandler } from './stomp-handler.js';\nimport { ActivationState, ReconnectionTimeMode, StompSocketState, TickerStrategy } from './types.js';\nimport { Versions } from './versions.js';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n *\n * This class provides a robust implementation for connecting to and interacting with a\n * STOMP-compliant messaging broker over WebSocket. It supports STOMP versions 1.2, 1.1, and 1.0.\n *\n * Features:\n * - Handles automatic reconnections.\n * - Supports heartbeat mechanisms to detect and report communication failures.\n * - Allows customization of connection and WebSocket behaviors through configurations.\n * - Compatible with both browser environments and Node.js with polyfill support for WebSocket.\n */\nexport class Client {\n  /**\n   * Provides access to the underlying WebSocket instance.\n   * This property is **read-only**.\n   *\n   * Example:\n   * ```javascript\n   * const webSocket = client.webSocket;\n   * if (webSocket) {\n   *   console.log('WebSocket is connected:', webSocket.readyState === WebSocket.OPEN);\n   * }\n   * ```\n   *\n   * **Caution:**\n   * Directly interacting with the WebSocket instance (e.g., sending or receiving frames)\n   * can interfere with the proper functioning of this library. Such actions may cause\n   * unexpected behavior, disconnections, or invalid state in the library's internal mechanisms.\n   *\n   * Instead, use the library's provided methods to manage STOMP communication.\n   *\n   * @returns The WebSocket instance used by the STOMP handler, or `undefined` if not connected.\n   */\n  get webSocket() {\n    return this._stompHandler?._webSocket;\n  }\n  /**\n   * Allows customization of the disconnection headers.\n   *\n   * Any changes made during an active session will also be applied immediately.\n   *\n   * Example:\n   * ```javascript\n   * client.disconnectHeaders = {\n   *   receipt: 'custom-receipt-id'\n   * };\n   * ```\n   */\n  get disconnectHeaders() {\n    return this._disconnectHeaders;\n  }\n  set disconnectHeaders(value) {\n    this._disconnectHeaders = value;\n    if (this._stompHandler) {\n      this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n    }\n  }\n  /**\n   * Indicates whether there is an active connection to the STOMP broker.\n   *\n   * Usage:\n   * ```javascript\n   * if (client.connected) {\n   *   console.log('Client is connected to the broker.');\n   * } else {\n   *   console.log('No connection to the broker.');\n   * }\n   * ```\n   *\n   * @returns `true` if the client is currently connected, `false` otherwise.\n   */\n  get connected() {\n    return !!this._stompHandler && this._stompHandler.connected;\n  }\n  /**\n   * The version of the STOMP protocol negotiated with the server during connection.\n   *\n   * This is a **read-only** property and reflects the negotiated protocol version after\n   * a successful connection.\n   *\n   * Example:\n   * ```javascript\n   * console.log('Connected STOMP version:', client.connectedVersion);\n   * ```\n   *\n   * @returns The negotiated STOMP protocol version or `undefined` if not connected.\n   */\n  get connectedVersion() {\n    return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n  }\n  /**\n   * Indicates whether the client is currently active.\n   *\n   * A client is considered active if it is connected or actively attempting to reconnect.\n   *\n   * Example:\n   * ```javascript\n   * if (client.active) {\n   *   console.log('The client is active.');\n   * } else {\n   *   console.log('The client is inactive.');\n   * }\n   * ```\n   *\n   * @returns `true` if the client is active, otherwise `false`.\n   */\n  get active() {\n    return this.state === ActivationState.ACTIVE;\n  }\n  _changeState(state) {\n    this.state = state;\n    this.onChangeState(state);\n  }\n  /**\n   * Constructs a new STOMP client instance.\n   *\n   * The constructor initializes default values and sets up no-op callbacks for all events.\n   * Configuration can be passed during construction, or updated later using `configure`.\n   *\n   * Example:\n   * ```javascript\n   * const client = new Client({\n   *   brokerURL: 'wss://broker.example.com',\n   *   reconnectDelay: 5000\n   * });\n   * ```\n   *\n   * @param conf Optional configuration object to initialize the client with.\n   */\n  constructor(conf = {}) {\n    /**\n     * STOMP protocol versions to use during the handshake. By default, the client will attempt\n     * versions `1.2`, `1.1`, and `1.0` in descending order of preference.\n     *\n     * Example:\n     * ```javascript\n     * // Configure the client to only use versions 1.1 and 1.0\n     * client.stompVersions = new Versions(['1.1', '1.0']);\n     * ```\n     */\n    this.stompVersions = Versions.default;\n    /**\n     * Timeout for establishing STOMP connection, in milliseconds.\n     *\n     * If the connection is not established within this period, the attempt will fail.\n     * The default is `0`, meaning no timeout is set for connection attempts.\n     *\n     * Example:\n     * ```javascript\n     * client.connectionTimeout = 5000; // Fail connection if not established in 5 seconds\n     * ```\n     */\n    this.connectionTimeout = 0;\n    /**\n     * Delay (in milliseconds) between reconnection attempts if the connection drops.\n     *\n     * Set to `0` to disable automatic reconnections. The default value is `5000` ms (5 seconds).\n     *\n     * Example:\n     * ```javascript\n     * client.reconnectDelay = 3000; // Attempt reconnection every 3 seconds\n     * client.reconnectDelay = 0; // Disable automatic reconnection\n     * ```\n     */\n    this.reconnectDelay = 5000;\n    /**\n     * The next reconnection delay, used internally.\n     * Initialized to the value of [Client#reconnectDelay]{@link Client#reconnectDelay}, and it may\n     * dynamically change based on [Client#reconnectTimeMode]{@link Client#reconnectTimeMode}.\n     */\n    this._nextReconnectDelay = 0;\n    /**\n     * Maximum delay (in milliseconds) between reconnection attempts when using exponential backoff.\n     *\n     * Default is 15 minutes (`15 * 60 * 1000` milliseconds). If `0`, there will be no upper limit.\n     *\n     * Example:\n     * ```javascript\n     * client.maxReconnectDelay = 10000; // Maximum wait time is 10 seconds\n     * ```\n     */\n    this.maxReconnectDelay = 15 * 60 * 1000;\n    /**\n     * Mode for determining the time interval between reconnection attempts.\n     *\n     * Available modes:\n     * - `ReconnectionTimeMode.LINEAR` (default): Fixed delays between reconnection attempts.\n     * - `ReconnectionTimeMode.EXPONENTIAL`: Delay doubles after each attempt, capped by [maxReconnectDelay]{@link Client#maxReconnectDelay}.\n     *\n     * Example:\n     * ```javascript\n     * client.reconnectTimeMode = ReconnectionTimeMode.EXPONENTIAL;\n     * client.reconnectDelay = 200; // Initial delay of 200 ms, doubles with each attempt\n     * client.maxReconnectDelay = 2 * 60 * 1000; // Cap delay at 10 minutes\n     * ```\n     */\n    this.reconnectTimeMode = ReconnectionTimeMode.LINEAR;\n    /**\n     * Interval (in milliseconds) for receiving heartbeat signals from the server.\n     *\n     * Specifies the expected frequency of heartbeats sent by the server. Set to `0` to disable.\n     *\n     * Example:\n     * ```javascript\n     * client.heartbeatIncoming = 10000; // Expect a heartbeat every 10 seconds\n     * ```\n     */\n    this.heartbeatIncoming = 10000;\n    /**\n     * Multiplier for adjusting tolerance when processing heartbeat signals.\n     *\n     * Tolerance level is calculated using the multiplier:\n     * `tolerance = heartbeatIncoming * heartbeatToleranceMultiplier`.\n     * This helps account for delays in network communication or variations in timings.\n     *\n     * Default value is `2`.\n     *\n     * Example:\n     * ```javascript\n     * client.heartbeatToleranceMultiplier = 2.5; // Tolerates longer delays\n     * ```\n     */\n    this.heartbeatToleranceMultiplier = 2;\n    /**\n     * Interval (in milliseconds) for sending heartbeat signals to the server.\n     *\n     * Specifies how frequently heartbeats should be sent to the server. Set to `0` to disable.\n     *\n     * Example:\n     * ```javascript\n     * client.heartbeatOutgoing = 5000; // Send a heartbeat every 5 seconds\n     * ```\n     */\n    this.heartbeatOutgoing = 10000;\n    /**\n     * Strategy for sending outgoing heartbeats.\n     *\n     * Options:\n     * - `TickerStrategy.Worker`: Uses Web Workers for sending heartbeats (recommended for long-running or background sessions).\n     * - `TickerStrategy.Interval`: Uses standard JavaScript `setInterval` (default).\n     *\n     * Note:\n     * - If Web Workers are unavailable (e.g., in Node.js), the `Interval` strategy is used automatically.\n     * - Web Workers are preferable in browsers for reducing disconnects when tabs are in the background.\n     *\n     * Example:\n     * ```javascript\n     * client.heartbeatStrategy = TickerStrategy.Worker;\n     * ```\n     */\n    this.heartbeatStrategy = TickerStrategy.Interval;\n    /**\n     * Enables splitting of large text WebSocket frames into smaller chunks.\n     *\n     * This setting is enabled for brokers that support only chunked messages (e.g., Java Spring-based brokers).\n     * Default is `false`.\n     *\n     * Warning:\n     * - Should not be used with WebSocket-compliant brokers, as chunking may cause large message failures.\n     * - Binary WebSocket frames are never split.\n     *\n     * Example:\n     * ```javascript\n     * client.splitLargeFrames = true;\n     * client.maxWebSocketChunkSize = 4096; // Allow chunks of 4 KB\n     * ```\n     */\n    this.splitLargeFrames = false;\n    /**\n     * Maximum size (in bytes) for individual WebSocket chunks if [splitLargeFrames]{@link Client#splitLargeFrames} is enabled.\n     *\n     * Default is 8 KB (`8 * 1024` bytes). This value has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n     */\n    this.maxWebSocketChunkSize = 8 * 1024;\n    /**\n     * Forces all WebSocket frames to use binary transport, irrespective of payload type.\n     *\n     * Default behavior determines frame type based on payload (e.g., binary data for ArrayBuffers).\n     *\n     * Example:\n     * ```javascript\n     * client.forceBinaryWSFrames = true;\n     * ```\n     */\n    this.forceBinaryWSFrames = false;\n    /**\n     * Workaround for a React Native WebSocket bug, where messages containing `NULL` are chopped.\n     *\n     * Enabling this appends a `NULL` character to incoming frames to ensure they remain valid STOMP packets.\n     *\n     * Warning:\n     * - For brokers that split large messages, this may cause data loss or connection termination.\n     *\n     * Example:\n     * ```javascript\n     * client.appendMissingNULLonIncoming = true;\n     * ```\n     */\n    this.appendMissingNULLonIncoming = false;\n    /**\n     * Instruct the library to immediately terminate the socket on communication failures, even\n     * before the WebSocket is completely closed.\n     *\n     * This is particularly useful in browser environments where WebSocket closure may get delayed,\n     * causing prolonged reconnection intervals under certain failure conditions.\n     *\n     *\n     * Example:\n     * ```javascript\n     * client.discardWebsocketOnCommFailure = true; // Enable aggressive closing of WebSocket\n     * ```\n     *\n     * Default value: `false`.\n     */\n    this.discardWebsocketOnCommFailure = false;\n    /**\n     * Current activation state of the client.\n     *\n     * Possible states:\n     * - `ActivationState.ACTIVE`: Client is connected or actively attempting to connect.\n     * - `ActivationState.INACTIVE`: Client is disconnected and not attempting to reconnect.\n     * - `ActivationState.DEACTIVATING`: Client is in the process of disconnecting.\n     *\n     * Note: The client may transition directly from `ACTIVE` to `INACTIVE` without entering\n     * the `DEACTIVATING` state.\n     */\n    this.state = ActivationState.INACTIVE;\n    // No op callbacks\n    const noOp = () => {};\n    this.debug = noOp;\n    this.beforeConnect = noOp;\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onUnhandledReceipt = noOp;\n    this.onUnhandledFrame = noOp;\n    this.onHeartbeatReceived = noOp;\n    this.onHeartbeatLost = noOp;\n    this.onStompError = noOp;\n    this.onWebSocketClose = noOp;\n    this.onWebSocketError = noOp;\n    this.logRawCommunication = false;\n    this.onChangeState = noOp;\n    // These parameters would typically get proper values before connect is called\n    this.connectHeaders = {};\n    this._disconnectHeaders = {};\n    // Apply configuration\n    this.configure(conf);\n  }\n  /**\n   * Updates the client's configuration.\n   *\n   * All properties in the provided configuration object will override the current settings.\n   *\n   * Additionally, a warning is logged if `maxReconnectDelay` is configured to a\n   * value lower than `reconnectDelay`, and `maxReconnectDelay` is adjusted to match `reconnectDelay`.\n   *\n   * Example:\n   * ```javascript\n   * client.configure({\n   *   reconnectDelay: 3000,\n   *   maxReconnectDelay: 10000\n   * });\n   * ```\n   *\n   * @param conf Configuration object containing the new settings.\n   */\n  configure(conf) {\n    // bulk assign all properties to this\n    Object.assign(this, conf);\n    // Warn on incorrect maxReconnectDelay settings\n    if (this.maxReconnectDelay > 0 && this.maxReconnectDelay < this.reconnectDelay) {\n      this.debug(`Warning: maxReconnectDelay (${this.maxReconnectDelay}ms) is less than reconnectDelay (${this.reconnectDelay}ms). Using reconnectDelay as the maxReconnectDelay delay.`);\n      this.maxReconnectDelay = this.reconnectDelay;\n    }\n  }\n  /**\n   * Activates the client, initiating a connection to the STOMP broker.\n   *\n   * On activation, the client attempts to connect and sets its state to `ACTIVE`. If the connection\n   * is lost, it will automatically retry based on `reconnectDelay` or `maxReconnectDelay`. If\n   * `reconnectTimeMode` is set to `EXPONENTIAL`, the reconnect delay increases exponentially.\n   *\n   * To stop reconnection attempts and disconnect, call [Client#deactivate]{@link Client#deactivate}.\n   *\n   * Example:\n   * ```javascript\n   * client.activate(); // Connect to the broker\n   * ```\n   *\n   * If the client is currently `DEACTIVATING`, connection is delayed until the deactivation process completes.\n   */\n  activate() {\n    const _activate = () => {\n      if (this.active) {\n        this.debug('Already ACTIVE, ignoring request to activate');\n        return;\n      }\n      this._changeState(ActivationState.ACTIVE);\n      this._nextReconnectDelay = this.reconnectDelay;\n      this._connect();\n    };\n    // if it is deactivating, wait for it to complete before activating.\n    if (this.state === ActivationState.DEACTIVATING) {\n      this.debug('Waiting for deactivation to finish before activating');\n      this.deactivate().then(() => {\n        _activate();\n      });\n    } else {\n      _activate();\n    }\n  }\n  _connect() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.beforeConnect(_this);\n      if (_this._stompHandler) {\n        _this.debug('There is already a stompHandler, skipping the call to connect');\n        return;\n      }\n      if (!_this.active) {\n        _this.debug('Client has been marked inactive, will not attempt to connect');\n        return;\n      }\n      // setup connection watcher\n      if (_this.connectionTimeout > 0) {\n        // clear first\n        if (_this._connectionWatcher) {\n          clearTimeout(_this._connectionWatcher);\n        }\n        _this._connectionWatcher = setTimeout(() => {\n          if (_this.connected) {\n            return;\n          }\n          // Connection not established, close the underlying socket\n          // a reconnection will be attempted\n          _this.debug(`Connection not established in ${_this.connectionTimeout}ms, closing socket`);\n          _this.forceDisconnect();\n        }, _this.connectionTimeout);\n      }\n      _this.debug('Opening Web Socket...');\n      // Get the actual WebSocket (or a similar object)\n      const webSocket = _this._createWebSocket();\n      _this._stompHandler = new StompHandler(_this, webSocket, {\n        debug: _this.debug,\n        stompVersions: _this.stompVersions,\n        connectHeaders: _this.connectHeaders,\n        disconnectHeaders: _this._disconnectHeaders,\n        heartbeatIncoming: _this.heartbeatIncoming,\n        heartbeatGracePeriods: _this.heartbeatToleranceMultiplier,\n        heartbeatOutgoing: _this.heartbeatOutgoing,\n        heartbeatStrategy: _this.heartbeatStrategy,\n        splitLargeFrames: _this.splitLargeFrames,\n        maxWebSocketChunkSize: _this.maxWebSocketChunkSize,\n        forceBinaryWSFrames: _this.forceBinaryWSFrames,\n        logRawCommunication: _this.logRawCommunication,\n        appendMissingNULLonIncoming: _this.appendMissingNULLonIncoming,\n        discardWebsocketOnCommFailure: _this.discardWebsocketOnCommFailure,\n        onConnect: frame => {\n          // Successfully connected, stop the connection watcher\n          if (_this._connectionWatcher) {\n            clearTimeout(_this._connectionWatcher);\n            _this._connectionWatcher = undefined;\n          }\n          // Reset reconnect delay after successful connection\n          _this._nextReconnectDelay = _this.reconnectDelay;\n          if (!_this.active) {\n            _this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n            _this._disposeStompHandler();\n            return;\n          }\n          _this.onConnect(frame);\n        },\n        onDisconnect: frame => {\n          _this.onDisconnect(frame);\n        },\n        onStompError: frame => {\n          _this.onStompError(frame);\n        },\n        onWebSocketClose: evt => {\n          _this._stompHandler = undefined; // a new one will be created in case of a reconnect\n          if (_this.state === ActivationState.DEACTIVATING) {\n            // Mark deactivation complete\n            _this._changeState(ActivationState.INACTIVE);\n          }\n          // The callback is called before attempting to reconnect, this would allow the client\n          // to be `deactivated` in the callback.\n          _this.onWebSocketClose(evt);\n          if (_this.active) {\n            _this._schedule_reconnect();\n          }\n        },\n        onWebSocketError: evt => {\n          _this.onWebSocketError(evt);\n        },\n        onUnhandledMessage: message => {\n          _this.onUnhandledMessage(message);\n        },\n        onUnhandledReceipt: frame => {\n          _this.onUnhandledReceipt(frame);\n        },\n        onUnhandledFrame: frame => {\n          _this.onUnhandledFrame(frame);\n        },\n        onHeartbeatReceived: () => {\n          _this.onHeartbeatReceived();\n        },\n        onHeartbeatLost: () => {\n          _this.onHeartbeatLost();\n        }\n      });\n      _this._stompHandler.start();\n    })();\n  }\n  _createWebSocket() {\n    let webSocket;\n    if (this.webSocketFactory) {\n      webSocket = this.webSocketFactory();\n    } else if (this.brokerURL) {\n      webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n    } else {\n      throw new Error('Either brokerURL or webSocketFactory must be provided');\n    }\n    webSocket.binaryType = 'arraybuffer';\n    return webSocket;\n  }\n  _schedule_reconnect() {\n    if (this._nextReconnectDelay > 0) {\n      this.debug(`STOMP: scheduling reconnection in ${this._nextReconnectDelay}ms`);\n      this._reconnector = setTimeout(() => {\n        if (this.reconnectTimeMode === ReconnectionTimeMode.EXPONENTIAL) {\n          this._nextReconnectDelay = this._nextReconnectDelay * 2;\n          // Truncated exponential backoff with a set limit unless disabled\n          if (this.maxReconnectDelay !== 0) {\n            this._nextReconnectDelay = Math.min(this._nextReconnectDelay, this.maxReconnectDelay);\n          }\n        }\n        this._connect();\n      }, this._nextReconnectDelay);\n    }\n  }\n  /**\n   * Disconnects the client and stops the automatic reconnection loop.\n   *\n   * If there is an active STOMP connection at the time of invocation, the appropriate callbacks\n   * will be triggered during the shutdown sequence. Once deactivated, the client will enter the\n   * `INACTIVE` state, and no further reconnection attempts will be made.\n   *\n   * **Behavior**:\n   * - If there is no active WebSocket connection, this method resolves immediately.\n   * - If there is an active connection, the method waits for the underlying WebSocket\n   *   to properly close before resolving.\n   * - Multiple calls to this method are safe. Each invocation resolves upon completion.\n   * - To reactivate, call [Client#activate]{@link Client#activate}.\n   *\n   * **Experimental Option:**\n   * - By specifying the `force: true` option, the WebSocket connection is discarded immediately,\n   *   bypassing both the STOMP and WebSocket shutdown sequences.\n   * - **Caution:** Using `force: true` may leave the WebSocket in an inconsistent state,\n   *   and brokers may not immediately detect the termination.\n   *\n   * Example:\n   * ```javascript\n   * // Graceful disconnect\n   * await client.deactivate();\n   *\n   * // Forced disconnect to speed up shutdown when the connection is stale\n   * await client.deactivate({ force: true });\n   * ```\n   *\n   * @param options Configuration options for deactivation. Use `force: true` for immediate shutdown.\n   * @returns A Promise that resolves when the deactivation process completes.\n   */\n  deactivate() {\n    var _this2 = this;\n    return _asyncToGenerator(function* (options = {}) {\n      const force = options.force || false;\n      const needToDispose = _this2.active;\n      let retPromise;\n      if (_this2.state === ActivationState.INACTIVE) {\n        _this2.debug(`Already INACTIVE, nothing more to do`);\n        return Promise.resolve();\n      }\n      _this2._changeState(ActivationState.DEACTIVATING);\n      // Clear reconnection timer just to be safe\n      _this2._nextReconnectDelay = 0;\n      // Clear if a reconnection was scheduled\n      if (_this2._reconnector) {\n        clearTimeout(_this2._reconnector);\n        _this2._reconnector = undefined;\n      }\n      if (_this2._stompHandler &&\n      // @ts-ignore - if there is a _stompHandler, there is the webSocket\n      _this2.webSocket.readyState !== StompSocketState.CLOSED) {\n        const origOnWebSocketClose = _this2._stompHandler.onWebSocketClose;\n        // we need to wait for the underlying websocket to close\n        retPromise = new Promise((resolve, reject) => {\n          // @ts-ignore - there is a _stompHandler\n          _this2._stompHandler.onWebSocketClose = evt => {\n            origOnWebSocketClose(evt);\n            resolve();\n          };\n        });\n      } else {\n        // indicate that auto reconnect loop should terminate\n        _this2._changeState(ActivationState.INACTIVE);\n        return Promise.resolve();\n      }\n      if (force) {\n        _this2._stompHandler?.discardWebsocket();\n      } else if (needToDispose) {\n        _this2._disposeStompHandler();\n      }\n      return retPromise;\n    }).apply(this, arguments);\n  }\n  /**\n   * Forces a disconnect by directly closing the WebSocket.\n   *\n   * Unlike a normal disconnect, this does not send a DISCONNECT sequence to the broker but\n   * instead closes the WebSocket connection directly. After forcing a disconnect, the client\n   * will automatically attempt to reconnect based on its `reconnectDelay` configuration.\n   *\n   * **Note:** To prevent further reconnect attempts, call [Client#deactivate]{@link Client#deactivate}.\n   *\n   * Example:\n   * ```javascript\n   * client.forceDisconnect();\n   * ```\n   */\n  forceDisconnect() {\n    if (this._stompHandler) {\n      this._stompHandler.forceDisconnect();\n    }\n  }\n  _disposeStompHandler() {\n    // Dispose STOMP Handler\n    if (this._stompHandler) {\n      this._stompHandler.dispose();\n    }\n  }\n  /**\n   * Sends a message to the specified destination on the STOMP broker.\n   *\n   * The `body` must be a `string`. For non-string payloads (e.g., JSON), encode it as a string before sending.\n   * If sending binary data, use the `binaryBody` parameter as a [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n   *\n   * **Content-Length Behavior**:\n   * - For non-binary messages, the `content-length` header is added by default.\n   * - The `content-length` header can be skipped for text frames by setting `skipContentLengthHeader: true` in the parameters.\n   * - For binary messages, the `content-length` header is always included.\n   *\n   * **Notes**:\n   * - Ensure that brokers support binary frames before using `binaryBody`.\n   * - Sending messages with NULL octets and missing `content-length` headers can cause brokers to disconnect and throw errors.\n   *\n   * Example:\n   * ```javascript\n   * // Basic text message\n   * client.publish({ destination: \"/queue/test\", body: \"Hello, STOMP\" });\n   *\n   * // Text message with additional headers\n   * client.publish({ destination: \"/queue/test\", headers: { priority: 9 }, body: \"Hello, STOMP\" });\n   *\n   * // Skip content-length header\n   * client.publish({ destination: \"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true });\n   *\n   * // Binary message\n   * const binaryData = new Uint8Array([1, 2, 3, 4]);\n   * client.publish({\n   *   destination: '/topic/special',\n   *   binaryBody: binaryData,\n   *   headers: { 'content-type': 'application/octet-stream' }\n   * });\n   * ```\n   */\n  publish(params) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.publish(params);\n  }\n  _checkConnection() {\n    if (!this.connected) {\n      throw new TypeError('There is no underlying STOMP connection');\n    }\n  }\n  /**\n   * Monitors for a receipt acknowledgment from the broker for specific operations.\n   *\n   * Add a `receipt` header to the operation (like subscribe or publish), and use this method with\n   * the same receipt ID to detect when the broker has acknowledged the operation's completion.\n   *\n   * The callback is invoked with the corresponding {@link IFrame} when the receipt is received.\n   *\n   * Example:\n   * ```javascript\n   * const receiptId = \"unique-receipt-id\";\n   *\n   * client.watchForReceipt(receiptId, (frame) => {\n   *   console.log(\"Operation acknowledged by the broker:\", frame);\n   * });\n   *\n   * // Attach the receipt header to an operation\n   * client.publish({ destination: \"/queue/test\", headers: { receipt: receiptId }, body: \"Hello\" });\n   * ```\n   *\n   * @param receiptId Unique identifier for the receipt.\n   * @param callback Callback function invoked on receiving the RECEIPT frame.\n   */\n  watchForReceipt(receiptId, callback) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.watchForReceipt(receiptId, callback);\n  }\n  /**\n   * Subscribes to a destination on the STOMP broker.\n   *\n   * The callback is triggered for each message received from the subscribed destination. The message\n   * is passed as an {@link IMessage} instance.\n   *\n   * **Subscription ID**:\n   * - If no `id` is provided in `headers`, the library generates a unique subscription ID automatically.\n   * - Provide an explicit `id` in `headers` if you wish to manage the subscription ID manually.\n   *\n   * Example:\n   * ```javascript\n   * const callback = (message) => {\n   *   console.log(\"Received message:\", message.body);\n   * };\n   *\n   * // Auto-generated subscription ID\n   * const subscription = client.subscribe(\"/queue/test\", callback);\n   *\n   * // Explicit subscription ID\n   * const mySubId = \"my-subscription-id\";\n   * const subscription = client.subscribe(\"/queue/test\", callback, { id: mySubId });\n   * ```\n   *\n   * @param destination Destination to subscribe to.\n   * @param callback Function invoked for each received message.\n   * @param headers Optional headers for subscription, such as `id`.\n   * @returns A {@link StompSubscription} which can be used to manage the subscription.\n   */\n  subscribe(destination, callback, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    return this._stompHandler.subscribe(destination, callback, headers);\n  }\n  /**\n   * Unsubscribes from a subscription on the STOMP broker.\n   *\n   * Prefer using the `unsubscribe` method directly on the {@link StompSubscription} returned from `subscribe` for cleaner management:\n   * ```javascript\n   * const subscription = client.subscribe(\"/queue/test\", callback);\n   * // Unsubscribe using the subscription object\n   * subscription.unsubscribe();\n   * ```\n   *\n   * This method can also be used directly with the subscription ID.\n   *\n   * Example:\n   * ```javascript\n   * client.unsubscribe(\"my-subscription-id\");\n   * ```\n   *\n   * @param id Subscription ID to unsubscribe.\n   * @param headers Optional headers to pass for the UNSUBSCRIBE frame.\n   */\n  unsubscribe(id, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.unsubscribe(id, headers);\n  }\n  /**\n   * Starts a new transaction. The returned {@link ITransaction} object provides\n   * methods for [commit]{@link ITransaction#commit} and [abort]{@link ITransaction#abort}.\n   *\n   * If `transactionId` is not provided, the library generates a unique ID internally.\n   *\n   * Example:\n   * ```javascript\n   * const tx = client.begin(); // Auto-generated ID\n   *\n   * // Or explicitly specify a transaction ID\n   * const tx = client.begin(\"my-transaction-id\");\n   * ```\n   *\n   * @param transactionId Optional transaction ID.\n   * @returns An instance of {@link ITransaction}.\n   */\n  begin(transactionId) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    return this._stompHandler.begin(transactionId);\n  }\n  /**\n   * Commits a transaction.\n   *\n   * It is strongly recommended to call [commit]{@link ITransaction#commit} on\n   * the transaction object returned by [client#begin]{@link Client#begin}.\n   *\n   * Example:\n   * ```javascript\n   * const tx = client.begin();\n   * // Perform operations under this transaction\n   * tx.commit();\n   * ```\n   *\n   * @param transactionId The ID of the transaction to commit.\n   */\n  commit(transactionId) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.commit(transactionId);\n  }\n  /**\n   * Aborts a transaction.\n   *\n   * It is strongly recommended to call [abort]{@link ITransaction#abort} directly\n   * on the transaction object returned by [client#begin]{@link Client#begin}.\n   *\n   * Example:\n   * ```javascript\n   * const tx = client.begin();\n   * // Perform operations under this transaction\n   * tx.abort(); // Abort the transaction\n   * ```\n   *\n   * @param transactionId The ID of the transaction to abort.\n   */\n  abort(transactionId) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.abort(transactionId);\n  }\n  /**\n   * Acknowledges receipt of a message. Typically, this should be done by calling\n   * [ack]{@link IMessage#ack} directly on the {@link IMessage} instance passed\n   * to the subscription callback.\n   *\n   * Example:\n   * ```javascript\n   * const callback = (message) => {\n   *   // Process the message\n   *   message.ack(); // Acknowledge the message\n   * };\n   *\n   * client.subscribe(\"/queue/example\", callback, { ack: \"client\" });\n   * ```\n   *\n   * @param messageId The ID of the message to acknowledge.\n   * @param subscriptionId The ID of the subscription.\n   * @param headers Optional headers for the acknowledgment frame.\n   */\n  ack(messageId, subscriptionId, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.ack(messageId, subscriptionId, headers);\n  }\n  /**\n   * Rejects a message (negative acknowledgment). Like acknowledgments, this should\n   * typically be done by calling [nack]{@link IMessage#nack} directly on the {@link IMessage}\n   * instance passed to the subscription callback.\n   *\n   * Example:\n   * ```javascript\n   * const callback = (message) => {\n   *   // Process the message\n   *   if (isError(message)) {\n   *     message.nack(); // Reject the message\n   *   }\n   * };\n   *\n   * client.subscribe(\"/queue/example\", callback, { ack: \"client\" });\n   * ```\n   *\n   * @param messageId The ID of the message to negatively acknowledge.\n   * @param subscriptionId The ID of the subscription.\n   * @param headers Optional headers for the NACK frame.\n   */\n  nack(messageId, subscriptionId, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.nack(messageId, subscriptionId, headers);\n  }\n}","map":{"version":3,"names":["StompHandler","ActivationState","ReconnectionTimeMode","StompSocketState","TickerStrategy","Versions","Client","webSocket","_stompHandler","_webSocket","disconnectHeaders","_disconnectHeaders","value","connected","connectedVersion","undefined","active","state","ACTIVE","_changeState","onChangeState","constructor","conf","stompVersions","default","connectionTimeout","reconnectDelay","_nextReconnectDelay","maxReconnectDelay","reconnectTimeMode","LINEAR","heartbeatIncoming","heartbeatToleranceMultiplier","heartbeatOutgoing","heartbeatStrategy","Interval","splitLargeFrames","maxWebSocketChunkSize","forceBinaryWSFrames","appendMissingNULLonIncoming","discardWebsocketOnCommFailure","INACTIVE","noOp","debug","beforeConnect","onConnect","onDisconnect","onUnhandledMessage","onUnhandledReceipt","onUnhandledFrame","onHeartbeatReceived","onHeartbeatLost","onStompError","onWebSocketClose","onWebSocketError","logRawCommunication","connectHeaders","configure","Object","assign","activate","_activate","_connect","DEACTIVATING","deactivate","then","_connectionWatcher","clearTimeout","setTimeout","forceDisconnect","_createWebSocket","heartbeatGracePeriods","frame","_disposeStompHandler","evt","_schedule_reconnect","message","start","webSocketFactory","brokerURL","WebSocket","protocolVersions","Error","binaryType","_reconnector","EXPONENTIAL","Math","min","options","force","needToDispose","retPromise","Promise","resolve","readyState","CLOSED","origOnWebSocketClose","reject","discardWebsocket","dispose","publish","params","_checkConnection","TypeError","watchForReceipt","receiptId","callback","subscribe","destination","headers","unsubscribe","id","begin","transactionId","commit","abort","ack","messageId","subscriptionId","nack"],"sources":["C:/Users/swatip/Documents/FSD Projects/Chatting-Application/frontend/node_modules/@stomp/stompjs/esm6/client.js"],"sourcesContent":["import { StompHandler } from './stomp-handler.js';\nimport { ActivationState, ReconnectionTimeMode, StompSocketState, TickerStrategy, } from './types.js';\nimport { Versions } from './versions.js';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n *\n * This class provides a robust implementation for connecting to and interacting with a\n * STOMP-compliant messaging broker over WebSocket. It supports STOMP versions 1.2, 1.1, and 1.0.\n *\n * Features:\n * - Handles automatic reconnections.\n * - Supports heartbeat mechanisms to detect and report communication failures.\n * - Allows customization of connection and WebSocket behaviors through configurations.\n * - Compatible with both browser environments and Node.js with polyfill support for WebSocket.\n */\nexport class Client {\n    /**\n     * Provides access to the underlying WebSocket instance.\n     * This property is **read-only**.\n     *\n     * Example:\n     * ```javascript\n     * const webSocket = client.webSocket;\n     * if (webSocket) {\n     *   console.log('WebSocket is connected:', webSocket.readyState === WebSocket.OPEN);\n     * }\n     * ```\n     *\n     * **Caution:**\n     * Directly interacting with the WebSocket instance (e.g., sending or receiving frames)\n     * can interfere with the proper functioning of this library. Such actions may cause\n     * unexpected behavior, disconnections, or invalid state in the library's internal mechanisms.\n     *\n     * Instead, use the library's provided methods to manage STOMP communication.\n     *\n     * @returns The WebSocket instance used by the STOMP handler, or `undefined` if not connected.\n     */\n    get webSocket() {\n        return this._stompHandler?._webSocket;\n    }\n    /**\n     * Allows customization of the disconnection headers.\n     *\n     * Any changes made during an active session will also be applied immediately.\n     *\n     * Example:\n     * ```javascript\n     * client.disconnectHeaders = {\n     *   receipt: 'custom-receipt-id'\n     * };\n     * ```\n     */\n    get disconnectHeaders() {\n        return this._disconnectHeaders;\n    }\n    set disconnectHeaders(value) {\n        this._disconnectHeaders = value;\n        if (this._stompHandler) {\n            this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n        }\n    }\n    /**\n     * Indicates whether there is an active connection to the STOMP broker.\n     *\n     * Usage:\n     * ```javascript\n     * if (client.connected) {\n     *   console.log('Client is connected to the broker.');\n     * } else {\n     *   console.log('No connection to the broker.');\n     * }\n     * ```\n     *\n     * @returns `true` if the client is currently connected, `false` otherwise.\n     */\n    get connected() {\n        return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * The version of the STOMP protocol negotiated with the server during connection.\n     *\n     * This is a **read-only** property and reflects the negotiated protocol version after\n     * a successful connection.\n     *\n     * Example:\n     * ```javascript\n     * console.log('Connected STOMP version:', client.connectedVersion);\n     * ```\n     *\n     * @returns The negotiated STOMP protocol version or `undefined` if not connected.\n     */\n    get connectedVersion() {\n        return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * Indicates whether the client is currently active.\n     *\n     * A client is considered active if it is connected or actively attempting to reconnect.\n     *\n     * Example:\n     * ```javascript\n     * if (client.active) {\n     *   console.log('The client is active.');\n     * } else {\n     *   console.log('The client is inactive.');\n     * }\n     * ```\n     *\n     * @returns `true` if the client is active, otherwise `false`.\n     */\n    get active() {\n        return this.state === ActivationState.ACTIVE;\n    }\n    _changeState(state) {\n        this.state = state;\n        this.onChangeState(state);\n    }\n    /**\n     * Constructs a new STOMP client instance.\n     *\n     * The constructor initializes default values and sets up no-op callbacks for all events.\n     * Configuration can be passed during construction, or updated later using `configure`.\n     *\n     * Example:\n     * ```javascript\n     * const client = new Client({\n     *   brokerURL: 'wss://broker.example.com',\n     *   reconnectDelay: 5000\n     * });\n     * ```\n     *\n     * @param conf Optional configuration object to initialize the client with.\n     */\n    constructor(conf = {}) {\n        /**\n         * STOMP protocol versions to use during the handshake. By default, the client will attempt\n         * versions `1.2`, `1.1`, and `1.0` in descending order of preference.\n         *\n         * Example:\n         * ```javascript\n         * // Configure the client to only use versions 1.1 and 1.0\n         * client.stompVersions = new Versions(['1.1', '1.0']);\n         * ```\n         */\n        this.stompVersions = Versions.default;\n        /**\n         * Timeout for establishing STOMP connection, in milliseconds.\n         *\n         * If the connection is not established within this period, the attempt will fail.\n         * The default is `0`, meaning no timeout is set for connection attempts.\n         *\n         * Example:\n         * ```javascript\n         * client.connectionTimeout = 5000; // Fail connection if not established in 5 seconds\n         * ```\n         */\n        this.connectionTimeout = 0;\n        /**\n         * Delay (in milliseconds) between reconnection attempts if the connection drops.\n         *\n         * Set to `0` to disable automatic reconnections. The default value is `5000` ms (5 seconds).\n         *\n         * Example:\n         * ```javascript\n         * client.reconnectDelay = 3000; // Attempt reconnection every 3 seconds\n         * client.reconnectDelay = 0; // Disable automatic reconnection\n         * ```\n         */\n        this.reconnectDelay = 5000;\n        /**\n         * The next reconnection delay, used internally.\n         * Initialized to the value of [Client#reconnectDelay]{@link Client#reconnectDelay}, and it may\n         * dynamically change based on [Client#reconnectTimeMode]{@link Client#reconnectTimeMode}.\n         */\n        this._nextReconnectDelay = 0;\n        /**\n         * Maximum delay (in milliseconds) between reconnection attempts when using exponential backoff.\n         *\n         * Default is 15 minutes (`15 * 60 * 1000` milliseconds). If `0`, there will be no upper limit.\n         *\n         * Example:\n         * ```javascript\n         * client.maxReconnectDelay = 10000; // Maximum wait time is 10 seconds\n         * ```\n         */\n        this.maxReconnectDelay = 15 * 60 * 1000;\n        /**\n         * Mode for determining the time interval between reconnection attempts.\n         *\n         * Available modes:\n         * - `ReconnectionTimeMode.LINEAR` (default): Fixed delays between reconnection attempts.\n         * - `ReconnectionTimeMode.EXPONENTIAL`: Delay doubles after each attempt, capped by [maxReconnectDelay]{@link Client#maxReconnectDelay}.\n         *\n         * Example:\n         * ```javascript\n         * client.reconnectTimeMode = ReconnectionTimeMode.EXPONENTIAL;\n         * client.reconnectDelay = 200; // Initial delay of 200 ms, doubles with each attempt\n         * client.maxReconnectDelay = 2 * 60 * 1000; // Cap delay at 10 minutes\n         * ```\n         */\n        this.reconnectTimeMode = ReconnectionTimeMode.LINEAR;\n        /**\n         * Interval (in milliseconds) for receiving heartbeat signals from the server.\n         *\n         * Specifies the expected frequency of heartbeats sent by the server. Set to `0` to disable.\n         *\n         * Example:\n         * ```javascript\n         * client.heartbeatIncoming = 10000; // Expect a heartbeat every 10 seconds\n         * ```\n         */\n        this.heartbeatIncoming = 10000;\n        /**\n         * Multiplier for adjusting tolerance when processing heartbeat signals.\n         *\n         * Tolerance level is calculated using the multiplier:\n         * `tolerance = heartbeatIncoming * heartbeatToleranceMultiplier`.\n         * This helps account for delays in network communication or variations in timings.\n         *\n         * Default value is `2`.\n         *\n         * Example:\n         * ```javascript\n         * client.heartbeatToleranceMultiplier = 2.5; // Tolerates longer delays\n         * ```\n         */\n        this.heartbeatToleranceMultiplier = 2;\n        /**\n         * Interval (in milliseconds) for sending heartbeat signals to the server.\n         *\n         * Specifies how frequently heartbeats should be sent to the server. Set to `0` to disable.\n         *\n         * Example:\n         * ```javascript\n         * client.heartbeatOutgoing = 5000; // Send a heartbeat every 5 seconds\n         * ```\n         */\n        this.heartbeatOutgoing = 10000;\n        /**\n         * Strategy for sending outgoing heartbeats.\n         *\n         * Options:\n         * - `TickerStrategy.Worker`: Uses Web Workers for sending heartbeats (recommended for long-running or background sessions).\n         * - `TickerStrategy.Interval`: Uses standard JavaScript `setInterval` (default).\n         *\n         * Note:\n         * - If Web Workers are unavailable (e.g., in Node.js), the `Interval` strategy is used automatically.\n         * - Web Workers are preferable in browsers for reducing disconnects when tabs are in the background.\n         *\n         * Example:\n         * ```javascript\n         * client.heartbeatStrategy = TickerStrategy.Worker;\n         * ```\n         */\n        this.heartbeatStrategy = TickerStrategy.Interval;\n        /**\n         * Enables splitting of large text WebSocket frames into smaller chunks.\n         *\n         * This setting is enabled for brokers that support only chunked messages (e.g., Java Spring-based brokers).\n         * Default is `false`.\n         *\n         * Warning:\n         * - Should not be used with WebSocket-compliant brokers, as chunking may cause large message failures.\n         * - Binary WebSocket frames are never split.\n         *\n         * Example:\n         * ```javascript\n         * client.splitLargeFrames = true;\n         * client.maxWebSocketChunkSize = 4096; // Allow chunks of 4 KB\n         * ```\n         */\n        this.splitLargeFrames = false;\n        /**\n         * Maximum size (in bytes) for individual WebSocket chunks if [splitLargeFrames]{@link Client#splitLargeFrames} is enabled.\n         *\n         * Default is 8 KB (`8 * 1024` bytes). This value has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n         */\n        this.maxWebSocketChunkSize = 8 * 1024;\n        /**\n         * Forces all WebSocket frames to use binary transport, irrespective of payload type.\n         *\n         * Default behavior determines frame type based on payload (e.g., binary data for ArrayBuffers).\n         *\n         * Example:\n         * ```javascript\n         * client.forceBinaryWSFrames = true;\n         * ```\n         */\n        this.forceBinaryWSFrames = false;\n        /**\n         * Workaround for a React Native WebSocket bug, where messages containing `NULL` are chopped.\n         *\n         * Enabling this appends a `NULL` character to incoming frames to ensure they remain valid STOMP packets.\n         *\n         * Warning:\n         * - For brokers that split large messages, this may cause data loss or connection termination.\n         *\n         * Example:\n         * ```javascript\n         * client.appendMissingNULLonIncoming = true;\n         * ```\n         */\n        this.appendMissingNULLonIncoming = false;\n        /**\n         * Instruct the library to immediately terminate the socket on communication failures, even\n         * before the WebSocket is completely closed.\n         *\n         * This is particularly useful in browser environments where WebSocket closure may get delayed,\n         * causing prolonged reconnection intervals under certain failure conditions.\n         *\n         *\n         * Example:\n         * ```javascript\n         * client.discardWebsocketOnCommFailure = true; // Enable aggressive closing of WebSocket\n         * ```\n         *\n         * Default value: `false`.\n         */\n        this.discardWebsocketOnCommFailure = false;\n        /**\n         * Current activation state of the client.\n         *\n         * Possible states:\n         * - `ActivationState.ACTIVE`: Client is connected or actively attempting to connect.\n         * - `ActivationState.INACTIVE`: Client is disconnected and not attempting to reconnect.\n         * - `ActivationState.DEACTIVATING`: Client is in the process of disconnecting.\n         *\n         * Note: The client may transition directly from `ACTIVE` to `INACTIVE` without entering\n         * the `DEACTIVATING` state.\n         */\n        this.state = ActivationState.INACTIVE;\n        // No op callbacks\n        const noOp = () => { };\n        this.debug = noOp;\n        this.beforeConnect = noOp;\n        this.onConnect = noOp;\n        this.onDisconnect = noOp;\n        this.onUnhandledMessage = noOp;\n        this.onUnhandledReceipt = noOp;\n        this.onUnhandledFrame = noOp;\n        this.onHeartbeatReceived = noOp;\n        this.onHeartbeatLost = noOp;\n        this.onStompError = noOp;\n        this.onWebSocketClose = noOp;\n        this.onWebSocketError = noOp;\n        this.logRawCommunication = false;\n        this.onChangeState = noOp;\n        // These parameters would typically get proper values before connect is called\n        this.connectHeaders = {};\n        this._disconnectHeaders = {};\n        // Apply configuration\n        this.configure(conf);\n    }\n    /**\n     * Updates the client's configuration.\n     *\n     * All properties in the provided configuration object will override the current settings.\n     *\n     * Additionally, a warning is logged if `maxReconnectDelay` is configured to a\n     * value lower than `reconnectDelay`, and `maxReconnectDelay` is adjusted to match `reconnectDelay`.\n     *\n     * Example:\n     * ```javascript\n     * client.configure({\n     *   reconnectDelay: 3000,\n     *   maxReconnectDelay: 10000\n     * });\n     * ```\n     *\n     * @param conf Configuration object containing the new settings.\n     */\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n        // Warn on incorrect maxReconnectDelay settings\n        if (this.maxReconnectDelay > 0 &&\n            this.maxReconnectDelay < this.reconnectDelay) {\n            this.debug(`Warning: maxReconnectDelay (${this.maxReconnectDelay}ms) is less than reconnectDelay (${this.reconnectDelay}ms). Using reconnectDelay as the maxReconnectDelay delay.`);\n            this.maxReconnectDelay = this.reconnectDelay;\n        }\n    }\n    /**\n     * Activates the client, initiating a connection to the STOMP broker.\n     *\n     * On activation, the client attempts to connect and sets its state to `ACTIVE`. If the connection\n     * is lost, it will automatically retry based on `reconnectDelay` or `maxReconnectDelay`. If\n     * `reconnectTimeMode` is set to `EXPONENTIAL`, the reconnect delay increases exponentially.\n     *\n     * To stop reconnection attempts and disconnect, call [Client#deactivate]{@link Client#deactivate}.\n     *\n     * Example:\n     * ```javascript\n     * client.activate(); // Connect to the broker\n     * ```\n     *\n     * If the client is currently `DEACTIVATING`, connection is delayed until the deactivation process completes.\n     */\n    activate() {\n        const _activate = () => {\n            if (this.active) {\n                this.debug('Already ACTIVE, ignoring request to activate');\n                return;\n            }\n            this._changeState(ActivationState.ACTIVE);\n            this._nextReconnectDelay = this.reconnectDelay;\n            this._connect();\n        };\n        // if it is deactivating, wait for it to complete before activating.\n        if (this.state === ActivationState.DEACTIVATING) {\n            this.debug('Waiting for deactivation to finish before activating');\n            this.deactivate().then(() => {\n                _activate();\n            });\n        }\n        else {\n            _activate();\n        }\n    }\n    async _connect() {\n        await this.beforeConnect(this);\n        if (this._stompHandler) {\n            this.debug('There is already a stompHandler, skipping the call to connect');\n            return;\n        }\n        if (!this.active) {\n            this.debug('Client has been marked inactive, will not attempt to connect');\n            return;\n        }\n        // setup connection watcher\n        if (this.connectionTimeout > 0) {\n            // clear first\n            if (this._connectionWatcher) {\n                clearTimeout(this._connectionWatcher);\n            }\n            this._connectionWatcher = setTimeout(() => {\n                if (this.connected) {\n                    return;\n                }\n                // Connection not established, close the underlying socket\n                // a reconnection will be attempted\n                this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n                this.forceDisconnect();\n            }, this.connectionTimeout);\n        }\n        this.debug('Opening Web Socket...');\n        // Get the actual WebSocket (or a similar object)\n        const webSocket = this._createWebSocket();\n        this._stompHandler = new StompHandler(this, webSocket, {\n            debug: this.debug,\n            stompVersions: this.stompVersions,\n            connectHeaders: this.connectHeaders,\n            disconnectHeaders: this._disconnectHeaders,\n            heartbeatIncoming: this.heartbeatIncoming,\n            heartbeatGracePeriods: this.heartbeatToleranceMultiplier,\n            heartbeatOutgoing: this.heartbeatOutgoing,\n            heartbeatStrategy: this.heartbeatStrategy,\n            splitLargeFrames: this.splitLargeFrames,\n            maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n            forceBinaryWSFrames: this.forceBinaryWSFrames,\n            logRawCommunication: this.logRawCommunication,\n            appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n            discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n            onConnect: frame => {\n                // Successfully connected, stop the connection watcher\n                if (this._connectionWatcher) {\n                    clearTimeout(this._connectionWatcher);\n                    this._connectionWatcher = undefined;\n                }\n                // Reset reconnect delay after successful connection\n                this._nextReconnectDelay = this.reconnectDelay;\n                if (!this.active) {\n                    this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                    this._disposeStompHandler();\n                    return;\n                }\n                this.onConnect(frame);\n            },\n            onDisconnect: frame => {\n                this.onDisconnect(frame);\n            },\n            onStompError: frame => {\n                this.onStompError(frame);\n            },\n            onWebSocketClose: evt => {\n                this._stompHandler = undefined; // a new one will be created in case of a reconnect\n                if (this.state === ActivationState.DEACTIVATING) {\n                    // Mark deactivation complete\n                    this._changeState(ActivationState.INACTIVE);\n                }\n                // The callback is called before attempting to reconnect, this would allow the client\n                // to be `deactivated` in the callback.\n                this.onWebSocketClose(evt);\n                if (this.active) {\n                    this._schedule_reconnect();\n                }\n            },\n            onWebSocketError: evt => {\n                this.onWebSocketError(evt);\n            },\n            onUnhandledMessage: message => {\n                this.onUnhandledMessage(message);\n            },\n            onUnhandledReceipt: frame => {\n                this.onUnhandledReceipt(frame);\n            },\n            onUnhandledFrame: frame => {\n                this.onUnhandledFrame(frame);\n            },\n            onHeartbeatReceived: () => {\n                this.onHeartbeatReceived();\n            },\n            onHeartbeatLost: () => {\n                this.onHeartbeatLost();\n            },\n        });\n        this._stompHandler.start();\n    }\n    _createWebSocket() {\n        let webSocket;\n        if (this.webSocketFactory) {\n            webSocket = this.webSocketFactory();\n        }\n        else if (this.brokerURL) {\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n        }\n        else {\n            throw new Error('Either brokerURL or webSocketFactory must be provided');\n        }\n        webSocket.binaryType = 'arraybuffer';\n        return webSocket;\n    }\n    _schedule_reconnect() {\n        if (this._nextReconnectDelay > 0) {\n            this.debug(`STOMP: scheduling reconnection in ${this._nextReconnectDelay}ms`);\n            this._reconnector = setTimeout(() => {\n                if (this.reconnectTimeMode === ReconnectionTimeMode.EXPONENTIAL) {\n                    this._nextReconnectDelay = this._nextReconnectDelay * 2;\n                    // Truncated exponential backoff with a set limit unless disabled\n                    if (this.maxReconnectDelay !== 0) {\n                        this._nextReconnectDelay = Math.min(this._nextReconnectDelay, this.maxReconnectDelay);\n                    }\n                }\n                this._connect();\n            }, this._nextReconnectDelay);\n        }\n    }\n    /**\n     * Disconnects the client and stops the automatic reconnection loop.\n     *\n     * If there is an active STOMP connection at the time of invocation, the appropriate callbacks\n     * will be triggered during the shutdown sequence. Once deactivated, the client will enter the\n     * `INACTIVE` state, and no further reconnection attempts will be made.\n     *\n     * **Behavior**:\n     * - If there is no active WebSocket connection, this method resolves immediately.\n     * - If there is an active connection, the method waits for the underlying WebSocket\n     *   to properly close before resolving.\n     * - Multiple calls to this method are safe. Each invocation resolves upon completion.\n     * - To reactivate, call [Client#activate]{@link Client#activate}.\n     *\n     * **Experimental Option:**\n     * - By specifying the `force: true` option, the WebSocket connection is discarded immediately,\n     *   bypassing both the STOMP and WebSocket shutdown sequences.\n     * - **Caution:** Using `force: true` may leave the WebSocket in an inconsistent state,\n     *   and brokers may not immediately detect the termination.\n     *\n     * Example:\n     * ```javascript\n     * // Graceful disconnect\n     * await client.deactivate();\n     *\n     * // Forced disconnect to speed up shutdown when the connection is stale\n     * await client.deactivate({ force: true });\n     * ```\n     *\n     * @param options Configuration options for deactivation. Use `force: true` for immediate shutdown.\n     * @returns A Promise that resolves when the deactivation process completes.\n     */\n    async deactivate(options = {}) {\n        const force = options.force || false;\n        const needToDispose = this.active;\n        let retPromise;\n        if (this.state === ActivationState.INACTIVE) {\n            this.debug(`Already INACTIVE, nothing more to do`);\n            return Promise.resolve();\n        }\n        this._changeState(ActivationState.DEACTIVATING);\n        // Clear reconnection timer just to be safe\n        this._nextReconnectDelay = 0;\n        // Clear if a reconnection was scheduled\n        if (this._reconnector) {\n            clearTimeout(this._reconnector);\n            this._reconnector = undefined;\n        }\n        if (this._stompHandler &&\n            // @ts-ignore - if there is a _stompHandler, there is the webSocket\n            this.webSocket.readyState !== StompSocketState.CLOSED) {\n            const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\n            // we need to wait for the underlying websocket to close\n            retPromise = new Promise((resolve, reject) => {\n                // @ts-ignore - there is a _stompHandler\n                this._stompHandler.onWebSocketClose = evt => {\n                    origOnWebSocketClose(evt);\n                    resolve();\n                };\n            });\n        }\n        else {\n            // indicate that auto reconnect loop should terminate\n            this._changeState(ActivationState.INACTIVE);\n            return Promise.resolve();\n        }\n        if (force) {\n            this._stompHandler?.discardWebsocket();\n        }\n        else if (needToDispose) {\n            this._disposeStompHandler();\n        }\n        return retPromise;\n    }\n    /**\n     * Forces a disconnect by directly closing the WebSocket.\n     *\n     * Unlike a normal disconnect, this does not send a DISCONNECT sequence to the broker but\n     * instead closes the WebSocket connection directly. After forcing a disconnect, the client\n     * will automatically attempt to reconnect based on its `reconnectDelay` configuration.\n     *\n     * **Note:** To prevent further reconnect attempts, call [Client#deactivate]{@link Client#deactivate}.\n     *\n     * Example:\n     * ```javascript\n     * client.forceDisconnect();\n     * ```\n     */\n    forceDisconnect() {\n        if (this._stompHandler) {\n            this._stompHandler.forceDisconnect();\n        }\n    }\n    _disposeStompHandler() {\n        // Dispose STOMP Handler\n        if (this._stompHandler) {\n            this._stompHandler.dispose();\n        }\n    }\n    /**\n     * Sends a message to the specified destination on the STOMP broker.\n     *\n     * The `body` must be a `string`. For non-string payloads (e.g., JSON), encode it as a string before sending.\n     * If sending binary data, use the `binaryBody` parameter as a [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     *\n     * **Content-Length Behavior**:\n     * - For non-binary messages, the `content-length` header is added by default.\n     * - The `content-length` header can be skipped for text frames by setting `skipContentLengthHeader: true` in the parameters.\n     * - For binary messages, the `content-length` header is always included.\n     *\n     * **Notes**:\n     * - Ensure that brokers support binary frames before using `binaryBody`.\n     * - Sending messages with NULL octets and missing `content-length` headers can cause brokers to disconnect and throw errors.\n     *\n     * Example:\n     * ```javascript\n     * // Basic text message\n     * client.publish({ destination: \"/queue/test\", body: \"Hello, STOMP\" });\n     *\n     * // Text message with additional headers\n     * client.publish({ destination: \"/queue/test\", headers: { priority: 9 }, body: \"Hello, STOMP\" });\n     *\n     * // Skip content-length header\n     * client.publish({ destination: \"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true });\n     *\n     * // Binary message\n     * const binaryData = new Uint8Array([1, 2, 3, 4]);\n     * client.publish({\n     *   destination: '/topic/special',\n     *   binaryBody: binaryData,\n     *   headers: { 'content-type': 'application/octet-stream' }\n     * });\n     * ```\n     */\n    publish(params) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.publish(params);\n    }\n    _checkConnection() {\n        if (!this.connected) {\n            throw new TypeError('There is no underlying STOMP connection');\n        }\n    }\n    /**\n     * Monitors for a receipt acknowledgment from the broker for specific operations.\n     *\n     * Add a `receipt` header to the operation (like subscribe or publish), and use this method with\n     * the same receipt ID to detect when the broker has acknowledged the operation's completion.\n     *\n     * The callback is invoked with the corresponding {@link IFrame} when the receipt is received.\n     *\n     * Example:\n     * ```javascript\n     * const receiptId = \"unique-receipt-id\";\n     *\n     * client.watchForReceipt(receiptId, (frame) => {\n     *   console.log(\"Operation acknowledged by the broker:\", frame);\n     * });\n     *\n     * // Attach the receipt header to an operation\n     * client.publish({ destination: \"/queue/test\", headers: { receipt: receiptId }, body: \"Hello\" });\n     * ```\n     *\n     * @param receiptId Unique identifier for the receipt.\n     * @param callback Callback function invoked on receiving the RECEIPT frame.\n     */\n    watchForReceipt(receiptId, callback) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribes to a destination on the STOMP broker.\n     *\n     * The callback is triggered for each message received from the subscribed destination. The message\n     * is passed as an {@link IMessage} instance.\n     *\n     * **Subscription ID**:\n     * - If no `id` is provided in `headers`, the library generates a unique subscription ID automatically.\n     * - Provide an explicit `id` in `headers` if you wish to manage the subscription ID manually.\n     *\n     * Example:\n     * ```javascript\n     * const callback = (message) => {\n     *   console.log(\"Received message:\", message.body);\n     * };\n     *\n     * // Auto-generated subscription ID\n     * const subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     * // Explicit subscription ID\n     * const mySubId = \"my-subscription-id\";\n     * const subscription = client.subscribe(\"/queue/test\", callback, { id: mySubId });\n     * ```\n     *\n     * @param destination Destination to subscribe to.\n     * @param callback Function invoked for each received message.\n     * @param headers Optional headers for subscription, such as `id`.\n     * @returns A {@link StompSubscription} which can be used to manage the subscription.\n     */\n    subscribe(destination, callback, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * Unsubscribes from a subscription on the STOMP broker.\n     *\n     * Prefer using the `unsubscribe` method directly on the {@link StompSubscription} returned from `subscribe` for cleaner management:\n     * ```javascript\n     * const subscription = client.subscribe(\"/queue/test\", callback);\n     * // Unsubscribe using the subscription object\n     * subscription.unsubscribe();\n     * ```\n     *\n     * This method can also be used directly with the subscription ID.\n     *\n     * Example:\n     * ```javascript\n     * client.unsubscribe(\"my-subscription-id\");\n     * ```\n     *\n     * @param id Subscription ID to unsubscribe.\n     * @param headers Optional headers to pass for the UNSUBSCRIBE frame.\n     */\n    unsubscribe(id, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Starts a new transaction. The returned {@link ITransaction} object provides\n     * methods for [commit]{@link ITransaction#commit} and [abort]{@link ITransaction#abort}.\n     *\n     * If `transactionId` is not provided, the library generates a unique ID internally.\n     *\n     * Example:\n     * ```javascript\n     * const tx = client.begin(); // Auto-generated ID\n     *\n     * // Or explicitly specify a transaction ID\n     * const tx = client.begin(\"my-transaction-id\");\n     * ```\n     *\n     * @param transactionId Optional transaction ID.\n     * @returns An instance of {@link ITransaction}.\n     */\n    begin(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commits a transaction.\n     *\n     * It is strongly recommended to call [commit]{@link ITransaction#commit} on\n     * the transaction object returned by [client#begin]{@link Client#begin}.\n     *\n     * Example:\n     * ```javascript\n     * const tx = client.begin();\n     * // Perform operations under this transaction\n     * tx.commit();\n     * ```\n     *\n     * @param transactionId The ID of the transaction to commit.\n     */\n    commit(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Aborts a transaction.\n     *\n     * It is strongly recommended to call [abort]{@link ITransaction#abort} directly\n     * on the transaction object returned by [client#begin]{@link Client#begin}.\n     *\n     * Example:\n     * ```javascript\n     * const tx = client.begin();\n     * // Perform operations under this transaction\n     * tx.abort(); // Abort the transaction\n     * ```\n     *\n     * @param transactionId The ID of the transaction to abort.\n     */\n    abort(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.abort(transactionId);\n    }\n    /**\n     * Acknowledges receipt of a message. Typically, this should be done by calling\n     * [ack]{@link IMessage#ack} directly on the {@link IMessage} instance passed\n     * to the subscription callback.\n     *\n     * Example:\n     * ```javascript\n     * const callback = (message) => {\n     *   // Process the message\n     *   message.ack(); // Acknowledge the message\n     * };\n     *\n     * client.subscribe(\"/queue/example\", callback, { ack: \"client\" });\n     * ```\n     *\n     * @param messageId The ID of the message to acknowledge.\n     * @param subscriptionId The ID of the subscription.\n     * @param headers Optional headers for the acknowledgment frame.\n     */\n    ack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * Rejects a message (negative acknowledgment). Like acknowledgments, this should\n     * typically be done by calling [nack]{@link IMessage#nack} directly on the {@link IMessage}\n     * instance passed to the subscription callback.\n     *\n     * Example:\n     * ```javascript\n     * const callback = (message) => {\n     *   // Process the message\n     *   if (isError(message)) {\n     *     message.nack(); // Reject the message\n     *   }\n     * };\n     *\n     * client.subscribe(\"/queue/example\", callback, { ack: \"client\" });\n     * ```\n     *\n     * @param messageId The ID of the message to negatively acknowledge.\n     * @param subscriptionId The ID of the subscription.\n     * @param headers Optional headers for the NACK frame.\n     */\n    nack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n}\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,oBAAoB;AACjD,SAASC,eAAe,EAAEC,oBAAoB,EAAEC,gBAAgB,EAAEC,cAAc,QAAS,YAAY;AACrG,SAASC,QAAQ,QAAQ,eAAe;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,CAAC;EAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIC,SAAS,GAAG;IACZ,OAAO,IAAI,CAACC,aAAa,EAAEC,UAAU;EACzC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIC,iBAAiB,GAAG;IACpB,OAAO,IAAI,CAACC,kBAAkB;EAClC;EACA,IAAID,iBAAiB,CAACE,KAAK,EAAE;IACzB,IAAI,CAACD,kBAAkB,GAAGC,KAAK;IAC/B,IAAI,IAAI,CAACJ,aAAa,EAAE;MACpB,IAAI,CAACA,aAAa,CAACE,iBAAiB,GAAG,IAAI,CAACC,kBAAkB;IAClE;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIE,SAAS,GAAG;IACZ,OAAO,CAAC,CAAC,IAAI,CAACL,aAAa,IAAI,IAAI,CAACA,aAAa,CAACK,SAAS;EAC/D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIC,gBAAgB,GAAG;IACnB,OAAO,IAAI,CAACN,aAAa,GAAG,IAAI,CAACA,aAAa,CAACM,gBAAgB,GAAGC,SAAS;EAC/E;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIC,MAAM,GAAG;IACT,OAAO,IAAI,CAACC,KAAK,KAAKhB,eAAe,CAACiB,MAAM;EAChD;EACAC,YAAY,CAACF,KAAK,EAAE;IAChB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACG,aAAa,CAACH,KAAK,CAAC;EAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,WAAW,CAACC,IAAI,GAAG,CAAC,CAAC,EAAE;IACnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,aAAa,GAAGlB,QAAQ,CAACmB,OAAO;IACrC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG,CAAC;IAC1B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,mBAAmB,GAAG,CAAC;IAC5B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IACvC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG3B,oBAAoB,CAAC4B,MAAM;IACpD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG,KAAK;IAC9B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,4BAA4B,GAAG,CAAC;IACrC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG,KAAK;IAC9B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG9B,cAAc,CAAC+B,QAAQ;IAChD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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EAAE;MACpB,IAAI,CAACA,aAAa,CAAC2F,OAAO,EAAE;IAChC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,OAAO,CAACC,MAAM,EAAE;IACZ,IAAI,CAACC,gBAAgB,EAAE;IACvB;IACA,IAAI,CAAC9F,aAAa,CAAC4F,OAAO,CAACC,MAAM,CAAC;EACtC;EACAC,gBAAgB,GAAG;IACf,IAAI,CAAC,IAAI,CAACzF,SAAS,EAAE;MACjB,MAAM,IAAI0F,SAAS,CAAC,yCAAyC,CAAC;IAClE;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,eAAe,CAACC,SAAS,EAAEC,QAAQ,EAAE;IACjC,IAAI,CAACJ,gBAAgB,EAAE;IACvB;IACA,IAAI,CAAC9F,aAAa,CAACgG,eAAe,CAACC,SAAS,EAAEC,QAAQ,CAAC;EAC3D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,SAAS,CAACC,WAAW,EAAEF,QAAQ,EAAEG,OAAO,GAAG,CAAC,CAAC,EAAE;IAC3C,IAAI,CAACP,gBAAgB,EAAE;IACvB;IACA,OAAO,IAAI,CAAC9F,aAAa,CAACmG,SAAS,CAACC,WAAW,EAAEF,QAAQ,EAAEG,OAAO,CAAC;EACvE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,EAAE,EAAEF,OAAO,GAAG,CAAC,CAAC,EAAE;IAC1B,IAAI,CAACP,gBAAgB,EAAE;IACvB;IACA,IAAI,CAAC9F,aAAa,CAACsG,WAAW,CAACC,EAAE,EAAEF,OAAO,CAAC;EAC/C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,KAAK,CAACC,aAAa,EAAE;IACjB,IAAI,CAACX,gBAAgB,EAAE;IACvB;IACA,OAAO,IAAI,CAAC9F,aAAa,CAACwG,KAAK,CAACC,aAAa,CAAC;EAClD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,MAAM,CAACD,aAAa,EAAE;IAClB,IAAI,CAACX,gBAAgB,EAAE;IACvB;IACA,IAAI,CAAC9F,aAAa,CAAC0G,MAAM,CAACD,aAAa,CAAC;EAC5C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,KAAK,CAACF,aAAa,EAAE;IACjB,IAAI,CAACX,gBAAgB,EAAE;IACvB;IACA,IAAI,CAAC9F,aAAa,CAAC2G,KAAK,CAACF,aAAa,CAAC;EAC3C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,GAAG,CAACC,SAAS,EAAEC,cAAc,EAAET,OAAO,GAAG,CAAC,CAAC,EAAE;IACzC,IAAI,CAACP,gBAAgB,EAAE;IACvB;IACA,IAAI,CAAC9F,aAAa,CAAC4G,GAAG,CAACC,SAAS,EAAEC,cAAc,EAAET,OAAO,CAAC;EAC9D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIU,IAAI,CAACF,SAAS,EAAEC,cAAc,EAAET,OAAO,GAAG,CAAC,CAAC,EAAE;IAC1C,IAAI,CAACP,gBAAgB,EAAE;IACvB;IACA,IAAI,CAAC9F,aAAa,CAAC+G,IAAI,CAACF,SAAS,EAAEC,cAAc,EAAET,OAAO,CAAC;EAC/D;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}