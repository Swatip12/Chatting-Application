{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class NotificationService {\n  constructor() {\n    this.notifications = new BehaviorSubject([]);\n    this.notificationIdCounter = 0;\n  }\n  getNotifications() {\n    return this.notifications.asObservable();\n  }\n  showSuccess(message, duration = 5000) {\n    this.addNotification('success', message, duration);\n  }\n  showError(message, duration = 8000) {\n    this.addNotification('error', message, duration);\n  }\n  showWarning(message, duration = 6000) {\n    this.addNotification('warning', message, duration);\n  }\n  showInfo(message, duration = 5000) {\n    this.addNotification('info', message, duration);\n  }\n  addNotification(type, message, duration) {\n    const notification = {\n      id: `notification-${++this.notificationIdCounter}`,\n      type,\n      message,\n      duration,\n      timestamp: new Date()\n    };\n    const currentNotifications = this.notifications.value;\n    this.notifications.next([...currentNotifications, notification]);\n    // Auto-remove notification after duration\n    if (duration > 0) {\n      setTimeout(() => {\n        this.removeNotification(notification.id);\n      }, duration);\n    }\n  }\n  removeNotification(id) {\n    const currentNotifications = this.notifications.value;\n    const filteredNotifications = currentNotifications.filter(n => n.id !== id);\n    this.notifications.next(filteredNotifications);\n  }\n  clearAll() {\n    this.notifications.next([]);\n  }\n  static {\n    this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;AAalD,OAAM,MAAOC,mBAAmB;EAI9BC;IAHQ,kBAAa,GAAG,IAAIF,eAAe,CAAiB,EAAE,CAAC;IACvD,0BAAqB,GAAG,CAAC;EAElB;EAEfG,gBAAgB;IACd,OAAO,IAAI,CAACC,aAAa,CAACC,YAAY,EAAE;EAC1C;EAEAC,WAAW,CAACC,OAAe,EAAEC,WAAmB,IAAI;IAClD,IAAI,CAACC,eAAe,CAAC,SAAS,EAAEF,OAAO,EAAEC,QAAQ,CAAC;EACpD;EAEAE,SAAS,CAACH,OAAe,EAAEC,WAAmB,IAAI;IAChD,IAAI,CAACC,eAAe,CAAC,OAAO,EAAEF,OAAO,EAAEC,QAAQ,CAAC;EAClD;EAEAG,WAAW,CAACJ,OAAe,EAAEC,WAAmB,IAAI;IAClD,IAAI,CAACC,eAAe,CAAC,SAAS,EAAEF,OAAO,EAAEC,QAAQ,CAAC;EACpD;EAEAI,QAAQ,CAACL,OAAe,EAAEC,WAAmB,IAAI;IAC/C,IAAI,CAACC,eAAe,CAAC,MAAM,EAAEF,OAAO,EAAEC,QAAQ,CAAC;EACjD;EAEQC,eAAe,CAACI,IAA0B,EAAEN,OAAe,EAAEC,QAAgB;IACnF,MAAMM,YAAY,GAAiB;MACjCC,EAAE,EAAE,gBAAgB,EAAE,IAAI,CAACC,qBAAqB,EAAE;MAClDH,IAAI;MACJN,OAAO;MACPC,QAAQ;MACRS,SAAS,EAAE,IAAIC,IAAI;KACpB;IAED,MAAMC,oBAAoB,GAAG,IAAI,CAACf,aAAa,CAACgB,KAAK;IACrD,IAAI,CAAChB,aAAa,CAACiB,IAAI,CAAC,CAAC,GAAGF,oBAAoB,EAAEL,YAAY,CAAC,CAAC;IAEhE;IACA,IAAIN,QAAQ,GAAG,CAAC,EAAE;MAChBc,UAAU,CAAC,MAAK;QACd,IAAI,CAACC,kBAAkB,CAACT,YAAY,CAACC,EAAE,CAAC;MAC1C,CAAC,EAAEP,QAAQ,CAAC;;EAEhB;EAEAe,kBAAkB,CAACR,EAAU;IAC3B,MAAMI,oBAAoB,GAAG,IAAI,CAACf,aAAa,CAACgB,KAAK;IACrD,MAAMI,qBAAqB,GAAGL,oBAAoB,CAACM,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACX,EAAE,KAAKA,EAAE,CAAC;IAC3E,IAAI,CAACX,aAAa,CAACiB,IAAI,CAACG,qBAAqB,CAAC;EAChD;EAEAG,QAAQ;IACN,IAAI,CAACvB,aAAa,CAACiB,IAAI,CAAC,EAAE,CAAC;EAC7B;;;uBAtDWpB,mBAAmB;IAAA;EAAA;;;aAAnBA,mBAAmB;MAAA2B,SAAnB3B,mBAAmB;MAAA4B,YAFlB;IAAM;EAAA","names":["BehaviorSubject","NotificationService","constructor","getNotifications","notifications","asObservable","showSuccess","message","duration","addNotification","showError","showWarning","showInfo","type","notification","id","notificationIdCounter","timestamp","Date","currentNotifications","value","next","setTimeout","removeNotification","filteredNotifications","filter","n","clearAll","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\swatip\\Documents\\FSD Projects\\Chatting-Application\\frontend\\src\\app\\services\\notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  type: 'success' | 'error' | 'warning' | 'info';\r\n  message: string;\r\n  duration?: number;\r\n  timestamp: Date;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationService {\r\n  private notifications = new BehaviorSubject<Notification[]>([]);\r\n  private notificationIdCounter = 0;\r\n\r\n  constructor() {}\r\n\r\n  getNotifications(): Observable<Notification[]> {\r\n    return this.notifications.asObservable();\r\n  }\r\n\r\n  showSuccess(message: string, duration: number = 5000): void {\r\n    this.addNotification('success', message, duration);\r\n  }\r\n\r\n  showError(message: string, duration: number = 8000): void {\r\n    this.addNotification('error', message, duration);\r\n  }\r\n\r\n  showWarning(message: string, duration: number = 6000): void {\r\n    this.addNotification('warning', message, duration);\r\n  }\r\n\r\n  showInfo(message: string, duration: number = 5000): void {\r\n    this.addNotification('info', message, duration);\r\n  }\r\n\r\n  private addNotification(type: Notification['type'], message: string, duration: number): void {\r\n    const notification: Notification = {\r\n      id: `notification-${++this.notificationIdCounter}`,\r\n      type,\r\n      message,\r\n      duration,\r\n      timestamp: new Date()\r\n    };\r\n\r\n    const currentNotifications = this.notifications.value;\r\n    this.notifications.next([...currentNotifications, notification]);\r\n\r\n    // Auto-remove notification after duration\r\n    if (duration > 0) {\r\n      setTimeout(() => {\r\n        this.removeNotification(notification.id);\r\n      }, duration);\r\n    }\r\n  }\r\n\r\n  removeNotification(id: string): void {\r\n    const currentNotifications = this.notifications.value;\r\n    const filteredNotifications = currentNotifications.filter(n => n.id !== id);\r\n    this.notifications.next(filteredNotifications);\r\n  }\r\n\r\n  clearAll(): void {\r\n    this.notifications.next([]);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}