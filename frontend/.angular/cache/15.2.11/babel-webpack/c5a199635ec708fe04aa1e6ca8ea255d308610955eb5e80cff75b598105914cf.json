{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { UserStatus } from '../../models/user.model';\nlet UserListComponent = class UserListComponent {\n  constructor(chatService, authService) {\n    this.chatService = chatService;\n    this.authService = authService;\n    this.users = [];\n    this.selectedUser = null;\n    this.currentUser = null;\n    this.userSelected = new EventEmitter();\n    this.subscriptions = [];\n    this.connectionStatus = false;\n  }\n  ngOnInit() {\n    this.subscribeToUserUpdates();\n    this.subscribeToConnectionStatus();\n    this.loadUsers();\n  }\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n  subscribeToUserUpdates() {\n    const userStatusSub = this.chatService.subscribeToUserStatus().subscribe({\n      next: users => {\n        this.users = users.filter(user => user.id !== this.currentUser?.id);\n      },\n      error: error => {\n        console.error('Error receiving user status updates:', error);\n      }\n    });\n    this.subscriptions.push(userStatusSub);\n  }\n  subscribeToConnectionStatus() {\n    const connectionSub = this.chatService.getConnectionStatus().subscribe({\n      next: status => {\n        this.connectionStatus = status;\n      }\n    });\n    this.subscriptions.push(connectionSub);\n  }\n  loadUsers() {\n    this.authService.getUsers().subscribe({\n      next: users => {\n        this.users = users.filter(user => user.id !== this.currentUser?.id);\n      },\n      error: error => {\n        console.error('Error loading users:', error);\n      }\n    });\n  }\n  selectUser(user) {\n    this.userSelected.emit(user);\n  }\n  isOnline(user) {\n    return user.status === UserStatus.ONLINE;\n  }\n  getStatusClass(user) {\n    return this.isOnline(user) ? 'user-status-online' : 'user-status-offline';\n  }\n  getStatusIcon(user) {\n    return this.isOnline(user) ? 'fas fa-circle' : 'far fa-circle';\n  }\n  isSelected(user) {\n    return this.selectedUser?.id === user.id;\n  }\n  getUserInitial(username) {\n    return username.charAt(0).toUpperCase();\n  }\n  getLastSeenText(user) {\n    if (this.isOnline(user)) {\n      return 'Online';\n    }\n    if (!user.lastSeen) {\n      return 'Offline';\n    }\n    const lastSeen = new Date(user.lastSeen);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - lastSeen.getTime()) / (1000 * 60));\n    if (diffInMinutes < 1) {\n      return 'Just now';\n    } else if (diffInMinutes < 60) {\n      return `${diffInMinutes}m ago`;\n    } else if (diffInMinutes < 1440) {\n      // 24 hours\n      const hours = Math.floor(diffInMinutes / 60);\n      return `${hours}h ago`;\n    } else {\n      const days = Math.floor(diffInMinutes / 1440);\n      return `${days}d ago`;\n    }\n  }\n  refreshUsers() {\n    this.loadUsers();\n  }\n  getOnlineUsersCount() {\n    return this.users.filter(user => this.isOnline(user)).length;\n  }\n  getTotalUsersCount() {\n    return this.users.length;\n  }\n  trackByUserId(index, user) {\n    return user.id;\n  }\n};\n__decorate([Input()], UserListComponent.prototype, \"users\", void 0);\n__decorate([Input()], UserListComponent.prototype, \"selectedUser\", void 0);\n__decorate([Input()], UserListComponent.prototype, \"currentUser\", void 0);\n__decorate([Output()], UserListComponent.prototype, \"userSelected\", void 0);\nUserListComponent = __decorate([Component({\n  selector: 'app-user-list',\n  templateUrl: './user-list.component.html',\n  styleUrls: ['./user-list.component.css']\n})], UserListComponent);\nexport { UserListComponent };","map":{"version":3,"mappings":"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","names":["Component","Input","Output","EventEmitter","UserStatus","UserListComponent","constructor","chatService","authService","ngOnInit","subscribeToUserUpdates","subscribeToConnectionStatus","loadUsers","ngOnDestroy","subscriptions","forEach","sub","unsubscribe","userStatusSub","subscribeToUserStatus","subscribe","next","users","filter","user","id","currentUser","error","console","push","connectionSub","getConnectionStatus","status","connectionStatus","getUsers","selectUser","userSelected","emit","isOnline","ONLINE","getStatusClass","getStatusIcon","isSelected","selectedUser","getUserInitial","username","charAt","toUpperCase","getLastSeenText","lastSeen","Date","now","diffInMinutes","Math","floor","getTime","hours","days","refreshUsers","getOnlineUsersCount","length","getTotalUsersCount","trackByUserId","index","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\swatip\\Documents\\FSD Projects\\Chatting-Application\\frontend\\src\\app\\components\\user-list\\user-list.component.ts"],"sourcesContent":["import { Component, Input, Output, EventEmitter, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { User, UserStatus } from '../../models/user.model';\r\nimport { ChatService } from '../../services/chat.service';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-user-list',\r\n  templateUrl: './user-list.component.html',\r\n  styleUrls: ['./user-list.component.css']\r\n})\r\nexport class UserListComponent implements OnInit, OnDestroy {\r\n  @Input() users: User[] = [];\r\n  @Input() selectedUser: User | null = null;\r\n  @Input() currentUser: User | null = null;\r\n  @Output() userSelected = new EventEmitter<User>();\r\n\r\n  private subscriptions: Subscription[] = [];\r\n  connectionStatus = false;\r\n\r\n  constructor(\r\n    private chatService: ChatService,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.subscribeToUserUpdates();\r\n    this.subscribeToConnectionStatus();\r\n    this.loadUsers();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach(sub => sub.unsubscribe());\r\n  }\r\n\r\n  private subscribeToUserUpdates(): void {\r\n    const userStatusSub = this.chatService.subscribeToUserStatus().subscribe({\r\n      next: (users: User[]) => {\r\n        this.users = users.filter(user => user.id !== this.currentUser?.id);\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error receiving user status updates:', error);\r\n      }\r\n    });\r\n\r\n    this.subscriptions.push(userStatusSub);\r\n  }\r\n\r\n  private subscribeToConnectionStatus(): void {\r\n    const connectionSub = this.chatService.getConnectionStatus().subscribe({\r\n      next: (status: boolean) => {\r\n        this.connectionStatus = status;\r\n      }\r\n    });\r\n\r\n    this.subscriptions.push(connectionSub);\r\n  }\r\n\r\n  private loadUsers(): void {\r\n    this.authService.getUsers().subscribe({\r\n      next: (users: User[]) => {\r\n        this.users = users.filter(user => user.id !== this.currentUser?.id);\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading users:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  selectUser(user: User): void {\r\n    this.userSelected.emit(user);\r\n  }\r\n\r\n  isOnline(user: User): boolean {\r\n    return user.status === UserStatus.ONLINE;\r\n  }\r\n\r\n  getStatusClass(user: User): string {\r\n    return this.isOnline(user) ? 'user-status-online' : 'user-status-offline';\r\n  }\r\n\r\n  getStatusIcon(user: User): string {\r\n    return this.isOnline(user) ? 'fas fa-circle' : 'far fa-circle';\r\n  }\r\n\r\n  isSelected(user: User): boolean {\r\n    return this.selectedUser?.id === user.id;\r\n  }\r\n\r\n  getUserInitial(username: string): string {\r\n    return username.charAt(0).toUpperCase();\r\n  }\r\n\r\n  getLastSeenText(user: User): string {\r\n    if (this.isOnline(user)) {\r\n      return 'Online';\r\n    }\r\n\r\n    if (!user.lastSeen) {\r\n      return 'Offline';\r\n    }\r\n\r\n    const lastSeen = new Date(user.lastSeen);\r\n    const now = new Date();\r\n    const diffInMinutes = Math.floor((now.getTime() - lastSeen.getTime()) / (1000 * 60));\r\n\r\n    if (diffInMinutes < 1) {\r\n      return 'Just now';\r\n    } else if (diffInMinutes < 60) {\r\n      return `${diffInMinutes}m ago`;\r\n    } else if (diffInMinutes < 1440) { // 24 hours\r\n      const hours = Math.floor(diffInMinutes / 60);\r\n      return `${hours}h ago`;\r\n    } else {\r\n      const days = Math.floor(diffInMinutes / 1440);\r\n      return `${days}d ago`;\r\n    }\r\n  }\r\n\r\n  refreshUsers(): void {\r\n    this.loadUsers();\r\n  }\r\n\r\n  getOnlineUsersCount(): number {\r\n    return this.users.filter(user => this.isOnline(user)).length;\r\n  }\r\n\r\n  getTotalUsersCount(): number {\r\n    return this.users.length;\r\n  }\r\n\r\n  trackByUserId(index: number, user: User): number {\r\n    return user.id;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}