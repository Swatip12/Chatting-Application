{"ast":null,"code":"import { finalize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/loading.service\";\nexport class LoadingInterceptor {\n  constructor(loadingService) {\n    this.loadingService = loadingService;\n    this.activeRequests = 0;\n  }\n  intercept(req, next) {\n    // Don't show loading for certain endpoints (like logout)\n    const skipLoading = req.url.includes('/logout') || req.method === 'GET';\n    if (!skipLoading) {\n      this.activeRequests++;\n      this.loadingService.setLoading(true);\n    }\n    return next.handle(req).pipe(finalize(() => {\n      if (!skipLoading) {\n        this.activeRequests--;\n        if (this.activeRequests === 0) {\n          this.loadingService.setLoading(false);\n        }\n      }\n    }));\n  }\n  static {\n    this.ɵfac = function LoadingInterceptor_Factory(t) {\n      return new (t || LoadingInterceptor)(i0.ɵɵinject(i1.LoadingService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoadingInterceptor,\n      factory: LoadingInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"mappings":"AAGA,SAASA,QAAQ,QAAQ,gBAAgB;;;AAIzC,OAAM,MAAOC,kBAAkB;EAG7BC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IAF1B,mBAAc,GAAG,CAAC;EAE2B;EAErDC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD;IACA,MAAMC,WAAW,GAAGF,GAAG,CAACG,GAAG,CAACC,QAAQ,CAAC,SAAS,CAAC,IAAIJ,GAAG,CAACK,MAAM,KAAK,KAAK;IAEvE,IAAI,CAACH,WAAW,EAAE;MAChB,IAAI,CAACI,cAAc,EAAE;MACrB,IAAI,CAACR,cAAc,CAACS,UAAU,CAAC,IAAI,CAAC;;IAGtC,OAAON,IAAI,CAACO,MAAM,CAACR,GAAG,CAAC,CAACS,IAAI,CAC1Bd,QAAQ,CAAC,MAAK;MACZ,IAAI,CAACO,WAAW,EAAE;QAChB,IAAI,CAACI,cAAc,EAAE;QACrB,IAAI,IAAI,CAACA,cAAc,KAAK,CAAC,EAAE;UAC7B,IAAI,CAACR,cAAc,CAACS,UAAU,CAAC,KAAK,CAAC;;;IAG3C,CAAC,CAAC,CACH;EACH;;;uBAxBWX,kBAAkB;IAAA;EAAA;;;aAAlBA,kBAAkB;MAAAc,SAAlBd,kBAAkB;IAAA;EAAA","names":["finalize","LoadingInterceptor","constructor","loadingService","intercept","req","next","skipLoading","url","includes","method","activeRequests","setLoading","handle","pipe","factory"],"sourceRoot":"","sources":["C:\\Users\\swatip\\Documents\\FSD Projects\\Chatting-Application\\frontend\\src\\app\\interceptors\\loading.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { LoadingService } from '../services/loading.service';\r\n\r\n@Injectable()\r\nexport class LoadingInterceptor implements HttpInterceptor {\r\n  private activeRequests = 0;\r\n\r\n  constructor(private loadingService: LoadingService) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    // Don't show loading for certain endpoints (like logout)\r\n    const skipLoading = req.url.includes('/logout') || req.method === 'GET';\r\n    \r\n    if (!skipLoading) {\r\n      this.activeRequests++;\r\n      this.loadingService.setLoading(true);\r\n    }\r\n\r\n    return next.handle(req).pipe(\r\n      finalize(() => {\r\n        if (!skipLoading) {\r\n          this.activeRequests--;\r\n          if (this.activeRequests === 0) {\r\n            this.loadingService.setLoading(false);\r\n          }\r\n        }\r\n      })\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}